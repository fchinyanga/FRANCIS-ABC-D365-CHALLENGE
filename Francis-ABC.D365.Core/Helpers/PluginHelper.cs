// <author>Michael Palmer</author>
// <summary>Provides strongly-typed access to plugin input and output parameters</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:1.0.1.412
// </auto-generated>

namespace Francis_ABC.D365.Core.Helpers.Plugins.AddItemCampaign
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    { }

    /// <summary>
    /// Gets the value of the CampaignId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignId input parameter</returns>
    public static System.Guid GetCampaignId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignId");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignItemId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignItemId output parameter</returns>
    public static System.Guid GetCampaignItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["CampaignItemId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignItemId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignItemId parameter exists in the output paramater collection</returns>
    public static bool ContainsCampaignItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CampaignItemId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddItemCampaignActivity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }
    /// <summary>
    /// Gets the value of the ItemId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ItemId input parameter</returns>
    public static System.Guid GetItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ItemId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ItemId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ItemId parameter exists in the input paramater collection</returns>
    public static bool ContainsItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ItemId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignActivityItemId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityItemId output parameter</returns>
    public static System.Guid GetCampaignActivityItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["CampaignActivityItemId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityItemId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityItemId parameter exists in the output paramater collection</returns>
    public static bool ContainsCampaignActivityItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CampaignActivityItemId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddListMembersList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }
    /// <summary>
    /// Gets the value of the MemberIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MemberIds input parameter</returns>
    public static System.Guid[] GetMemberIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["MemberIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the MemberIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MemberIds parameter exists in the input paramater collection</returns>
    public static bool ContainsMemberIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MemberIds");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddMemberList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }
    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Id output parameter</returns>
    public static System.Guid GetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["Id"];
    }

    /// <summary>
    /// Gets a value indicating whether the Id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Id parameter exists in the output paramater collection</returns>
    public static bool ContainsId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddMembersByFetchXmlList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXml input parameter</returns>
    public static System.String GetFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FetchXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXml parameter exists in the input paramater collection</returns>
    public static bool ContainsFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FetchXml");
    }
    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddMembersTeam
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MemberIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MemberIds input parameter</returns>
    public static System.Guid[] GetMemberIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["MemberIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the MemberIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MemberIds parameter exists in the input paramater collection</returns>
    public static bool ContainsMemberIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MemberIds");
    }
    /// <summary>
    /// Gets the value of the TeamId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TeamId input parameter</returns>
    public static System.Guid GetTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TeamId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TeamId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TeamId parameter exists in the input paramater collection</returns>
    public static bool ContainsTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TeamId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddPrivilegesRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RoleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleId input parameter</returns>
    public static System.Guid GetRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RoleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleId parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleId");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddProductToKit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the KitId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the KitId input parameter</returns>
    public static System.Guid GetKitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["KitId"];
    }

    /// <summary>
    /// Gets a value indicating whether the KitId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the KitId parameter exists in the input paramater collection</returns>
    public static bool ContainsKitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("KitId");
    }
    /// <summary>
    /// Gets the value of the ProductId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProductId input parameter</returns>
    public static System.Guid GetProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ProductId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProductId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProductId parameter exists in the input paramater collection</returns>
    public static bool ContainsProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProductId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddRecurrence
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AppointmentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AppointmentId input parameter</returns>
    public static System.Guid GetAppointmentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["AppointmentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AppointmentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AppointmentId parameter exists in the input paramater collection</returns>
    public static bool ContainsAppointmentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AppointmentId");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddSolutionComponent
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AddRequiredComponents input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AddRequiredComponents input parameter</returns>
    public static System.Boolean GetAddRequiredComponents(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["AddRequiredComponents"];
    }

    /// <summary>
    /// Gets a value indicating whether the AddRequiredComponents parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AddRequiredComponents parameter exists in the input paramater collection</returns>
    public static bool ContainsAddRequiredComponents(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AddRequiredComponents");
    }
    /// <summary>
    /// Gets the value of the ComponentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentId input parameter</returns>
    public static System.Guid GetComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ComponentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentId parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentId");
    }
    /// <summary>
    /// Gets the value of the ComponentType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentType input parameter</returns>
    public static System.Int32 GetComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ComponentType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentType parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentType");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddSubstituteProduct
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ProductId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProductId input parameter</returns>
    public static System.Guid GetProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ProductId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProductId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProductId parameter exists in the input paramater collection</returns>
    public static bool ContainsProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProductId");
    }
    /// <summary>
    /// Gets the value of the SubstituteId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubstituteId input parameter</returns>
    public static System.Guid GetSubstituteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubstituteId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubstituteId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubstituteId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubstituteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubstituteId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AddToQueue
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DestinationQueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DestinationQueueId input parameter</returns>
    public static System.Guid GetDestinationQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["DestinationQueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the DestinationQueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DestinationQueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsDestinationQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DestinationQueueId");
    }
    /// <summary>
    /// Gets the value of the QueueItemProperties input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueueItemProperties input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetQueueItemProperties(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["QueueItemProperties"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueueItemProperties parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueueItemProperties parameter exists in the input paramater collection</returns>
    public static bool ContainsQueueItemProperties(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueueItemProperties");
    }
    /// <summary>
    /// Gets the value of the SourceQueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SourceQueueId input parameter</returns>
    public static System.Guid GetSourceQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SourceQueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SourceQueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SourceQueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsSourceQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SourceQueueId");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the QueueItemId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueueItemId output parameter</returns>
    public static System.Guid GetQueueItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["QueueItemId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueueItemId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueueItemId parameter exists in the output paramater collection</returns>
    public static bool ContainsQueueItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("QueueItemId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Assign
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Assignee input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Assignee input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetAssignee(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Assignee"];
    }

    /// <summary>
    /// Gets a value indicating whether the Assignee parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Assignee parameter exists in the input paramater collection</returns>
    public static bool ContainsAssignee(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Assignee");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AssignUserRolesRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RoleIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleIds input parameter</returns>
    public static System.Guid[] GetRoleIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["RoleIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleIds parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleIds");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Associate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RelatedEntities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RelatedEntities input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReferenceCollection GetRelatedEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReferenceCollection)context.InputParameters["RelatedEntities"];
    }

    /// <summary>
    /// Gets a value indicating whether the RelatedEntities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RelatedEntities parameter exists in the input paramater collection</returns>
    public static bool ContainsRelatedEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RelatedEntities");
    }
    /// <summary>
    /// Gets the value of the Relationship input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Relationship input parameter</returns>
    public static Microsoft.Xrm.Sdk.Relationship GetRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Relationship)context.InputParameters["Relationship"];
    }

    /// <summary>
    /// Gets a value indicating whether the Relationship parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Relationship parameter exists in the input paramater collection</returns>
    public static bool ContainsRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Relationship");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AssociateEntities
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Moniker1 input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Moniker1 input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetMoniker1(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Moniker1"];
    }

    /// <summary>
    /// Gets a value indicating whether the Moniker1 parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Moniker1 parameter exists in the input paramater collection</returns>
    public static bool ContainsMoniker1(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Moniker1");
    }
    /// <summary>
    /// Gets the value of the Moniker2 input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Moniker2 input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetMoniker2(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Moniker2"];
    }

    /// <summary>
    /// Gets a value indicating whether the Moniker2 parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Moniker2 parameter exists in the input paramater collection</returns>
    public static bool ContainsMoniker2(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Moniker2");
    }
    /// <summary>
    /// Gets the value of the RelationshipName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RelationshipName input parameter</returns>
    public static System.String GetRelationshipName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RelationshipName"];
    }

    /// <summary>
    /// Gets a value indicating whether the RelationshipName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RelationshipName parameter exists in the input paramater collection</returns>
    public static bool ContainsRelationshipName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RelationshipName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.AutoMapEntity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityMapId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMapId input parameter</returns>
    public static System.Guid GetEntityMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityMapId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMapId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMapId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityMapId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.BackgroundSendEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }
    /// <summary>
    /// Gets the value of the HasAttachments output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the HasAttachments output parameter</returns>
    public static System.Boolean[] GetHasAttachments(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean[])context.OutputParameters["HasAttachments"];
    }

    /// <summary>
    /// Gets a value indicating whether the HasAttachments parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the HasAttachments parameter exists in the output paramater collection</returns>
    public static bool ContainsHasAttachments(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("HasAttachments");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Book
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.BulkDelete
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CCRecipients input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CCRecipients input parameter</returns>
    public static System.Guid[] GetCCRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["CCRecipients"];
    }

    /// <summary>
    /// Gets a value indicating whether the CCRecipients parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CCRecipients parameter exists in the input paramater collection</returns>
    public static bool ContainsCCRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CCRecipients");
    }
    /// <summary>
    /// Gets the value of the JobName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the JobName input parameter</returns>
    public static System.String GetJobName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["JobName"];
    }

    /// <summary>
    /// Gets a value indicating whether the JobName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the JobName parameter exists in the input paramater collection</returns>
    public static bool ContainsJobName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("JobName");
    }
    /// <summary>
    /// Gets the value of the QuerySet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QuerySet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryExpression[] GetQuerySet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryExpression[])context.InputParameters["QuerySet"];
    }

    /// <summary>
    /// Gets a value indicating whether the QuerySet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QuerySet parameter exists in the input paramater collection</returns>
    public static bool ContainsQuerySet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QuerySet");
    }
    /// <summary>
    /// Gets the value of the RecurrencePattern input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RecurrencePattern input parameter</returns>
    public static System.String GetRecurrencePattern(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RecurrencePattern"];
    }

    /// <summary>
    /// Gets a value indicating whether the RecurrencePattern parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RecurrencePattern parameter exists in the input paramater collection</returns>
    public static bool ContainsRecurrencePattern(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RecurrencePattern");
    }
    /// <summary>
    /// Gets the value of the SendEmailNotification input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SendEmailNotification input parameter</returns>
    public static System.Boolean GetSendEmailNotification(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SendEmailNotification"];
    }

    /// <summary>
    /// Gets a value indicating whether the SendEmailNotification parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SendEmailNotification parameter exists in the input paramater collection</returns>
    public static bool ContainsSendEmailNotification(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SendEmailNotification");
    }
    /// <summary>
    /// Gets the value of the SourceImportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SourceImportId input parameter</returns>
    public static System.Guid? GetSourceImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid?)context.InputParameters["SourceImportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SourceImportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SourceImportId parameter exists in the input paramater collection</returns>
    public static bool ContainsSourceImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SourceImportId");
    }
    /// <summary>
    /// Gets the value of the StartDateTime input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the StartDateTime input parameter</returns>
    public static System.DateTime GetStartDateTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["StartDateTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the StartDateTime parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the StartDateTime parameter exists in the input paramater collection</returns>
    public static bool ContainsStartDateTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("StartDateTime");
    }
    /// <summary>
    /// Gets the value of the ToRecipients input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ToRecipients input parameter</returns>
    public static System.Guid[] GetToRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["ToRecipients"];
    }

    /// <summary>
    /// Gets a value indicating whether the ToRecipients parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ToRecipients parameter exists in the input paramater collection</returns>
    public static bool ContainsToRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ToRecipients");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the JobId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the JobId output parameter</returns>
    public static System.Guid GetJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["JobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the JobId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the JobId parameter exists in the output paramater collection</returns>
    public static bool ContainsJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("JobId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.BulkDetectDuplicates
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CCRecipients input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CCRecipients input parameter</returns>
    public static System.Guid[] GetCCRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["CCRecipients"];
    }

    /// <summary>
    /// Gets a value indicating whether the CCRecipients parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CCRecipients parameter exists in the input paramater collection</returns>
    public static bool ContainsCCRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CCRecipients");
    }
    /// <summary>
    /// Gets the value of the JobName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the JobName input parameter</returns>
    public static System.String GetJobName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["JobName"];
    }

    /// <summary>
    /// Gets a value indicating whether the JobName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the JobName parameter exists in the input paramater collection</returns>
    public static bool ContainsJobName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("JobName");
    }
    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the RecurrencePattern input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RecurrencePattern input parameter</returns>
    public static System.String GetRecurrencePattern(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RecurrencePattern"];
    }

    /// <summary>
    /// Gets a value indicating whether the RecurrencePattern parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RecurrencePattern parameter exists in the input paramater collection</returns>
    public static bool ContainsRecurrencePattern(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RecurrencePattern");
    }
    /// <summary>
    /// Gets the value of the RecurrenceStartTime input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RecurrenceStartTime input parameter</returns>
    public static System.DateTime GetRecurrenceStartTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["RecurrenceStartTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the RecurrenceStartTime parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RecurrenceStartTime parameter exists in the input paramater collection</returns>
    public static bool ContainsRecurrenceStartTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RecurrenceStartTime");
    }
    /// <summary>
    /// Gets the value of the SendEmailNotification input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SendEmailNotification input parameter</returns>
    public static System.Boolean GetSendEmailNotification(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SendEmailNotification"];
    }

    /// <summary>
    /// Gets a value indicating whether the SendEmailNotification parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SendEmailNotification parameter exists in the input paramater collection</returns>
    public static bool ContainsSendEmailNotification(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SendEmailNotification");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }
    /// <summary>
    /// Gets the value of the ToRecipients input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ToRecipients input parameter</returns>
    public static System.Guid[] GetToRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["ToRecipients"];
    }

    /// <summary>
    /// Gets a value indicating whether the ToRecipients parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ToRecipients parameter exists in the input paramater collection</returns>
    public static bool ContainsToRecipients(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ToRecipients");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the JobId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the JobId output parameter</returns>
    public static System.Guid GetJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["JobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the JobId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the JobId parameter exists in the output paramater collection</returns>
    public static bool ContainsJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("JobId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.BulkOperationStatusClose
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId input parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationId");
    }
    /// <summary>
    /// Gets the value of the ErrorCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ErrorCode input parameter</returns>
    public static System.Int32 GetErrorCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ErrorCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the ErrorCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ErrorCode parameter exists in the input paramater collection</returns>
    public static bool ContainsErrorCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ErrorCode");
    }
    /// <summary>
    /// Gets the value of the FailureCount input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FailureCount input parameter</returns>
    public static System.Int32 GetFailureCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["FailureCount"];
    }

    /// <summary>
    /// Gets a value indicating whether the FailureCount parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FailureCount parameter exists in the input paramater collection</returns>
    public static bool ContainsFailureCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FailureCount");
    }
    /// <summary>
    /// Gets the value of the StatusReason input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the StatusReason input parameter</returns>
    public static System.Int32 GetStatusReason(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["StatusReason"];
    }

    /// <summary>
    /// Gets a value indicating whether the StatusReason parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the StatusReason parameter exists in the input paramater collection</returns>
    public static bool ContainsStatusReason(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("StatusReason");
    }
    /// <summary>
    /// Gets the value of the SuccessCount input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SuccessCount input parameter</returns>
    public static System.Int32 GetSuccessCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["SuccessCount"];
    }

    /// <summary>
    /// Gets a value indicating whether the SuccessCount parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SuccessCount parameter exists in the input paramater collection</returns>
    public static bool ContainsSuccessCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SuccessCount");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CalculateActualValueOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OpportunityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityId input parameter</returns>
    public static System.Guid GetOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OpportunityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Value output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Value output parameter</returns>
    public static System.Decimal GetValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Decimal)context.OutputParameters["Value"];
    }

    /// <summary>
    /// Gets a value indicating whether the Value parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Value parameter exists in the output paramater collection</returns>
    public static bool ContainsValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Value");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CalculateTotalTimeIncident
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IncidentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IncidentId input parameter</returns>
    public static System.Guid GetIncidentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["IncidentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the IncidentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IncidentId parameter exists in the input paramater collection</returns>
    public static bool ContainsIncidentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IncidentId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TotalTime output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TotalTime output parameter</returns>
    public static System.Int64 GetTotalTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int64)context.OutputParameters["TotalTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the TotalTime parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TotalTime parameter exists in the output paramater collection</returns>
    public static bool ContainsTotalTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("TotalTime");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CanBeReferenced
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CanBeReferenced output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CanBeReferenced output parameter</returns>
    public static System.Boolean GetCanBeReferenced(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["CanBeReferenced"];
    }

    /// <summary>
    /// Gets a value indicating whether the CanBeReferenced parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CanBeReferenced parameter exists in the output paramater collection</returns>
    public static bool ContainsCanBeReferenced(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CanBeReferenced");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CanBeReferencing
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CanBeReferencing output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CanBeReferencing output parameter</returns>
    public static System.Boolean GetCanBeReferencing(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["CanBeReferencing"];
    }

    /// <summary>
    /// Gets a value indicating whether the CanBeReferencing parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CanBeReferencing parameter exists in the output paramater collection</returns>
    public static bool ContainsCanBeReferencing(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CanBeReferencing");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CancelContract
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CancelDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CancelDate input parameter</returns>
    public static System.DateTime GetCancelDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["CancelDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the CancelDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CancelDate parameter exists in the input paramater collection</returns>
    public static bool ContainsCancelDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CancelDate");
    }
    /// <summary>
    /// Gets the value of the ContractId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ContractId input parameter</returns>
    public static System.Guid GetContractId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ContractId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ContractId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ContractId parameter exists in the input paramater collection</returns>
    public static bool ContainsContractId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ContractId");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CancelSalesOrder
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OrderClose input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OrderClose input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetOrderClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["OrderClose"];
    }

    /// <summary>
    /// Gets a value indicating whether the OrderClose parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OrderClose parameter exists in the input paramater collection</returns>
    public static bool ContainsOrderClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OrderClose");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CanManyToMany
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CanManyToMany output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CanManyToMany output parameter</returns>
    public static System.Boolean GetCanManyToMany(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["CanManyToMany"];
    }

    /// <summary>
    /// Gets a value indicating whether the CanManyToMany parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CanManyToMany parameter exists in the output paramater collection</returns>
    public static bool ContainsCanManyToMany(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CanManyToMany");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CheckClientCompatibility
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CrmClientVersion input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CrmClientVersion input parameter</returns>
    public static System.String GetCrmClientVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CrmClientVersion"];
    }

    /// <summary>
    /// Gets a value indicating whether the CrmClientVersion parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CrmClientVersion parameter exists in the input paramater collection</returns>
    public static bool ContainsCrmClientVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CrmClientVersion");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Result output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Result output parameter</returns>
    public static System.Int32 GetResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["Result"];
    }

    /// <summary>
    /// Gets a value indicating whether the Result parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Result parameter exists in the output paramater collection</returns>
    public static bool ContainsResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Result");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CheckIncomingEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Bcc input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Bcc input parameter</returns>
    public static System.String GetBcc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Bcc"];
    }

    /// <summary>
    /// Gets a value indicating whether the Bcc parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Bcc parameter exists in the input paramater collection</returns>
    public static bool ContainsBcc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Bcc");
    }
    /// <summary>
    /// Gets the value of the Cc input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Cc input parameter</returns>
    public static System.String GetCc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Cc"];
    }

    /// <summary>
    /// Gets a value indicating whether the Cc parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Cc parameter exists in the input paramater collection</returns>
    public static bool ContainsCc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Cc");
    }
    /// <summary>
    /// Gets the value of the From input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the From input parameter</returns>
    public static System.String GetFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["From"];
    }

    /// <summary>
    /// Gets a value indicating whether the From parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the From parameter exists in the input paramater collection</returns>
    public static bool ContainsFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("From");
    }
    /// <summary>
    /// Gets the value of the MessageId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MessageId input parameter</returns>
    public static System.String GetMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MessageId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MessageId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MessageId parameter exists in the input paramater collection</returns>
    public static bool ContainsMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MessageId");
    }
    /// <summary>
    /// Gets the value of the Subject input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Subject input parameter</returns>
    public static System.String GetSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Subject"];
    }

    /// <summary>
    /// Gets a value indicating whether the Subject parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Subject parameter exists in the input paramater collection</returns>
    public static bool ContainsSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Subject");
    }
    /// <summary>
    /// Gets the value of the To input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the To input parameter</returns>
    public static System.String GetTo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["To"];
    }

    /// <summary>
    /// Gets a value indicating whether the To parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the To parameter exists in the input paramater collection</returns>
    public static bool ContainsTo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("To");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReasonCode output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReasonCode output parameter</returns>
    public static System.Int32 GetReasonCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["ReasonCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReasonCode parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReasonCode parameter exists in the output paramater collection</returns>
    public static bool ContainsReasonCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ReasonCode");
    }
    /// <summary>
    /// Gets the value of the ShouldDeliver output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ShouldDeliver output parameter</returns>
    public static System.Boolean GetShouldDeliver(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["ShouldDeliver"];
    }

    /// <summary>
    /// Gets a value indicating whether the ShouldDeliver parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ShouldDeliver parameter exists in the output paramater collection</returns>
    public static bool ContainsShouldDeliver(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ShouldDeliver");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CheckNotifications
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Events input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Events input parameter</returns>
    public static System.Int32[] GetEvents(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.InputParameters["Events"];
    }

    /// <summary>
    /// Gets a value indicating whether the Events parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Events parameter exists in the input paramater collection</returns>
    public static bool ContainsEvents(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Events");
    }
    /// <summary>
    /// Gets the value of the LastChecked input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LastChecked input parameter</returns>
    public static System.DateTime GetLastChecked(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["LastChecked"];
    }

    /// <summary>
    /// Gets a value indicating whether the LastChecked parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LastChecked parameter exists in the input paramater collection</returns>
    public static bool ContainsLastChecked(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LastChecked");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CheckPromoteEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MessageId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MessageId input parameter</returns>
    public static System.String GetMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MessageId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MessageId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MessageId parameter exists in the input paramater collection</returns>
    public static bool ContainsMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MessageId");
    }
    /// <summary>
    /// Gets the value of the Subject input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Subject input parameter</returns>
    public static System.String GetSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Subject"];
    }

    /// <summary>
    /// Gets a value indicating whether the Subject parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Subject parameter exists in the input paramater collection</returns>
    public static bool ContainsSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Subject");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReasonCode output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReasonCode output parameter</returns>
    public static System.Int32 GetReasonCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["ReasonCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReasonCode parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReasonCode parameter exists in the output paramater collection</returns>
    public static bool ContainsReasonCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ReasonCode");
    }
    /// <summary>
    /// Gets the value of the ShouldPromote output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ShouldPromote output parameter</returns>
    public static System.Boolean GetShouldPromote(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["ShouldPromote"];
    }

    /// <summary>
    /// Gets a value indicating whether the ShouldPromote parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ShouldPromote parameter exists in the output paramater collection</returns>
    public static bool ContainsShouldPromote(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ShouldPromote");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CheckRouterCompatibility
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CrmRouterVersion input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CrmRouterVersion input parameter</returns>
    public static System.String GetCrmRouterVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CrmRouterVersion"];
    }

    /// <summary>
    /// Gets a value indicating whether the CrmRouterVersion parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CrmRouterVersion parameter exists in the input paramater collection</returns>
    public static bool ContainsCrmRouterVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CrmRouterVersion");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Result output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Result output parameter</returns>
    public static System.Int32 GetResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["Result"];
    }

    /// <summary>
    /// Gets a value indicating whether the Result parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Result parameter exists in the output paramater collection</returns>
    public static bool ContainsResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Result");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CleanUpBulkOperation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId input parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationId");
    }
    /// <summary>
    /// Gets the value of the BulkOperationSource input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationSource input parameter</returns>
    public static System.Int32 GetBulkOperationSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["BulkOperationSource"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationSource parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationSource parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationSource");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CloneContract
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ContractId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ContractId input parameter</returns>
    public static System.Guid GetContractId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ContractId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ContractId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ContractId parameter exists in the input paramater collection</returns>
    public static bool ContainsContractId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ContractId");
    }
    /// <summary>
    /// Gets the value of the IncludeCanceledLines input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IncludeCanceledLines input parameter</returns>
    public static System.Boolean GetIncludeCanceledLines(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IncludeCanceledLines"];
    }

    /// <summary>
    /// Gets a value indicating whether the IncludeCanceledLines parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IncludeCanceledLines parameter exists in the input paramater collection</returns>
    public static bool ContainsIncludeCanceledLines(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IncludeCanceledLines");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CloseIncident
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IncidentResolution input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IncidentResolution input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetIncidentResolution(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["IncidentResolution"];
    }

    /// <summary>
    /// Gets a value indicating whether the IncidentResolution parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IncidentResolution parameter exists in the input paramater collection</returns>
    public static bool ContainsIncidentResolution(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IncidentResolution");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CloseQuote
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the QuoteClose input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QuoteClose input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetQuoteClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["QuoteClose"];
    }

    /// <summary>
    /// Gets a value indicating whether the QuoteClose parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QuoteClose parameter exists in the input paramater collection</returns>
    public static bool ContainsQuoteClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QuoteClose");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CompoundCreate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ChildEntities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ChildEntities input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetChildEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["ChildEntities"];
    }

    /// <summary>
    /// Gets a value indicating whether the ChildEntities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ChildEntities parameter exists in the input paramater collection</returns>
    public static bool ContainsChildEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ChildEntities");
    }
    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Id output parameter</returns>
    public static System.Guid GetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["Id"];
    }

    /// <summary>
    /// Gets a value indicating whether the Id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Id parameter exists in the output paramater collection</returns>
    public static bool ContainsId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CompoundUpdate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ChildEntities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ChildEntities input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetChildEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["ChildEntities"];
    }

    /// <summary>
    /// Gets a value indicating whether the ChildEntities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ChildEntities parameter exists in the input paramater collection</returns>
    public static bool ContainsChildEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ChildEntities");
    }
    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CompoundUpdateDuplicateDetectionRule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ChildEntities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ChildEntities input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetChildEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["ChildEntities"];
    }

    /// <summary>
    /// Gets a value indicating whether the ChildEntities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ChildEntities parameter exists in the input paramater collection</returns>
    public static bool ContainsChildEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ChildEntities");
    }
    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ConfigureReportingDataConnector
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DataProviderType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DataProviderType input parameter</returns>
    public static System.Int32 GetDataProviderType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["DataProviderType"];
    }

    /// <summary>
    /// Gets a value indicating whether the DataProviderType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DataProviderType parameter exists in the input paramater collection</returns>
    public static bool ContainsDataProviderType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DataProviderType");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ConvertKitToProduct
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the KitId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the KitId input parameter</returns>
    public static System.Guid GetKitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["KitId"];
    }

    /// <summary>
    /// Gets a value indicating whether the KitId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the KitId parameter exists in the input paramater collection</returns>
    public static bool ContainsKitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("KitId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ConvertProductToKit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ProductId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProductId input parameter</returns>
    public static System.Guid GetProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ProductId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProductId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProductId parameter exists in the input paramater collection</returns>
    public static bool ContainsProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProductId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ConvertQuoteToSalesOrder
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the QuoteId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QuoteId input parameter</returns>
    public static System.Guid GetQuoteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QuoteId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QuoteId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QuoteId parameter exists in the input paramater collection</returns>
    public static bool ContainsQuoteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QuoteId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ConvertSalesOrderToInvoice
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the SalesOrderId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SalesOrderId input parameter</returns>
    public static System.Guid GetSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SalesOrderId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SalesOrderId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SalesOrderId parameter exists in the input paramater collection</returns>
    public static bool ContainsSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SalesOrderId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CopyCampaign
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BaseCampaign input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BaseCampaign input parameter</returns>
    public static System.Guid GetBaseCampaign(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BaseCampaign"];
    }

    /// <summary>
    /// Gets a value indicating whether the BaseCampaign parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BaseCampaign parameter exists in the input paramater collection</returns>
    public static bool ContainsBaseCampaign(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BaseCampaign");
    }
    /// <summary>
    /// Gets the value of the SaveAsTemplate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SaveAsTemplate input parameter</returns>
    public static System.Boolean GetSaveAsTemplate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SaveAsTemplate"];
    }

    /// <summary>
    /// Gets a value indicating whether the SaveAsTemplate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SaveAsTemplate parameter exists in the input paramater collection</returns>
    public static bool ContainsSaveAsTemplate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SaveAsTemplate");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignCopyId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignCopyId output parameter</returns>
    public static System.Guid GetCampaignCopyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["CampaignCopyId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignCopyId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignCopyId parameter exists in the output paramater collection</returns>
    public static bool ContainsCampaignCopyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CampaignCopyId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CopyCampaignResponse
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignResponseId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignResponseId input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetCampaignResponseId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["CampaignResponseId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignResponseId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignResponseId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignResponseId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignResponseId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignResponseId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignResponseId output parameter</returns>
    public static System.Guid GetCampaignResponseId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["CampaignResponseId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignResponseId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignResponseId parameter exists in the output paramater collection</returns>
    public static bool ContainsCampaignResponseId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CampaignResponseId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CopyDynamicListToStatic
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the StaticListId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the StaticListId output parameter</returns>
    public static System.Guid GetStaticListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["StaticListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the StaticListId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the StaticListId parameter exists in the output paramater collection</returns>
    public static bool ContainsStaticListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("StaticListId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CopyMembersList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SourceListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SourceListId input parameter</returns>
    public static System.Guid GetSourceListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SourceListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SourceListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SourceListId parameter exists in the input paramater collection</returns>
    public static bool ContainsSourceListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SourceListId");
    }
    /// <summary>
    /// Gets the value of the TargetListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TargetListId input parameter</returns>
    public static System.Guid GetTargetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TargetListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TargetListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TargetListId parameter exists in the input paramater collection</returns>
    public static bool ContainsTargetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TargetListId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CopySystemForm
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SourceId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SourceId input parameter</returns>
    public static System.Guid GetSourceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SourceId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SourceId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SourceId parameter exists in the input paramater collection</returns>
    public static bool ContainsSourceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SourceId");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Id output parameter</returns>
    public static System.Guid GetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["Id"];
    }

    /// <summary>
    /// Gets a value indicating whether the Id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Id parameter exists in the output paramater collection</returns>
    public static bool ContainsId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Create
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CalculateMatchCodeSynchronously input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CalculateMatchCodeSynchronously input parameter</returns>
    public static System.Boolean GetCalculateMatchCodeSynchronously(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["CalculateMatchCodeSynchronously"];
    }

    /// <summary>
    /// Gets a value indicating whether the CalculateMatchCodeSynchronously parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CalculateMatchCodeSynchronously parameter exists in the input paramater collection</returns>
    public static bool ContainsCalculateMatchCodeSynchronously(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CalculateMatchCodeSynchronously");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the SuppressDuplicateDetection input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SuppressDuplicateDetection input parameter</returns>
    public static System.Boolean GetSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SuppressDuplicateDetection"];
    }

    /// <summary>
    /// Gets a value indicating whether the SuppressDuplicateDetection parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SuppressDuplicateDetection parameter exists in the input paramater collection</returns>
    public static bool ContainsSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SuppressDuplicateDetection");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateActivitiesList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Activity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Activity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Activity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Activity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Activity parameter exists in the input paramater collection</returns>
    public static bool ContainsActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Activity");
    }
    /// <summary>
    /// Gets the value of the FriendlyName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FriendlyName input parameter</returns>
    public static System.String GetFriendlyName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FriendlyName"];
    }

    /// <summary>
    /// Gets a value indicating whether the FriendlyName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FriendlyName parameter exists in the input paramater collection</returns>
    public static bool ContainsFriendlyName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FriendlyName");
    }
    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }
    /// <summary>
    /// Gets the value of the Owner input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Owner input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Owner"];
    }

    /// <summary>
    /// Gets a value indicating whether the Owner parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Owner parameter exists in the input paramater collection</returns>
    public static bool ContainsOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Owner");
    }
    /// <summary>
    /// Gets the value of the PostWorkflowEvent input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PostWorkflowEvent input parameter</returns>
    public static System.Boolean GetPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["PostWorkflowEvent"];
    }

    /// <summary>
    /// Gets a value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection</returns>
    public static bool ContainsPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PostWorkflowEvent");
    }
    /// <summary>
    /// Gets the value of the Propagate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Propagate input parameter</returns>
    public static System.Boolean GetPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["Propagate"];
    }

    /// <summary>
    /// Gets a value indicating whether the Propagate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Propagate parameter exists in the input paramater collection</returns>
    public static bool ContainsPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Propagate");
    }
    /// <summary>
    /// Gets the value of the QueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueueId input parameter</returns>
    public static System.Guid GetQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueueId");
    }
    /// <summary>
    /// Gets the value of the sendEmail input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the sendEmail input parameter</returns>
    public static System.Boolean GetsendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["sendEmail"];
    }

    /// <summary>
    /// Gets a value indicating whether the sendEmail parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the sendEmail parameter exists in the input paramater collection</returns>
    public static bool ContainssendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("sendEmail");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId output parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BulkOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateAttribute
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Attribute input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Attribute input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.AttributeMetadata GetAttribute(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.AttributeMetadata)context.InputParameters["Attribute"];
    }

    /// <summary>
    /// Gets a value indicating whether the Attribute parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Attribute parameter exists in the input paramater collection</returns>
    public static bool ContainsAttribute(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Attribute");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeId output parameter</returns>
    public static System.Guid GetAttributeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["AttributeId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeId parameter exists in the output paramater collection</returns>
    public static bool ContainsAttributeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AttributeId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateEntity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityMetadata GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityMetadata)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }
    /// <summary>
    /// Gets the value of the HasActivities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the HasActivities input parameter</returns>
    public static System.Boolean GetHasActivities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["HasActivities"];
    }

    /// <summary>
    /// Gets a value indicating whether the HasActivities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the HasActivities parameter exists in the input paramater collection</returns>
    public static bool ContainsHasActivities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("HasActivities");
    }
    /// <summary>
    /// Gets the value of the HasNotes input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the HasNotes input parameter</returns>
    public static System.Boolean GetHasNotes(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["HasNotes"];
    }

    /// <summary>
    /// Gets a value indicating whether the HasNotes parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the HasNotes parameter exists in the input paramater collection</returns>
    public static bool ContainsHasNotes(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("HasNotes");
    }
    /// <summary>
    /// Gets the value of the PrimaryAttribute input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PrimaryAttribute input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.StringAttributeMetadata GetPrimaryAttribute(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.StringAttributeMetadata)context.InputParameters["PrimaryAttribute"];
    }

    /// <summary>
    /// Gets a value indicating whether the PrimaryAttribute parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PrimaryAttribute parameter exists in the input paramater collection</returns>
    public static bool ContainsPrimaryAttribute(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PrimaryAttribute");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeId output parameter</returns>
    public static System.Guid GetAttributeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["AttributeId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeId parameter exists in the output paramater collection</returns>
    public static bool ContainsAttributeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AttributeId");
    }
    /// <summary>
    /// Gets the value of the EntityId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId output parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateException
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsDeleted input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsDeleted input parameter</returns>
    public static System.Boolean GetIsDeleted(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IsDeleted"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsDeleted parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsDeleted parameter exists in the input paramater collection</returns>
    public static bool ContainsIsDeleted(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IsDeleted");
    }
    /// <summary>
    /// Gets the value of the OriginalStartDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OriginalStartDate input parameter</returns>
    public static System.DateTime GetOriginalStartDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["OriginalStartDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the OriginalStartDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OriginalStartDate parameter exists in the input paramater collection</returns>
    public static bool ContainsOriginalStartDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OriginalStartDate");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateFromTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsOrgReport input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsOrgReport input parameter</returns>
    public static System.Boolean GetIsOrgReport(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IsOrgReport"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsOrgReport parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsOrgReport parameter exists in the input paramater collection</returns>
    public static bool ContainsIsOrgReport(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IsOrgReport");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the WizardXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the WizardXml input parameter</returns>
    public static System.String GetWizardXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["WizardXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the WizardXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the WizardXml parameter exists in the input paramater collection</returns>
    public static bool ContainsWizardXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("WizardXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateInstance
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Count input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Count input parameter</returns>
    public static System.Int32 GetCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Count"];
    }

    /// <summary>
    /// Gets a value indicating whether the Count parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Count parameter exists in the input paramater collection</returns>
    public static bool ContainsCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Count");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SeriesCanBeExpanded output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SeriesCanBeExpanded output parameter</returns>
    public static System.Boolean GetSeriesCanBeExpanded(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["SeriesCanBeExpanded"];
    }

    /// <summary>
    /// Gets a value indicating whether the SeriesCanBeExpanded parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SeriesCanBeExpanded parameter exists in the output paramater collection</returns>
    public static bool ContainsSeriesCanBeExpanded(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SeriesCanBeExpanded");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateManyToMany
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IntersectEntitySchemaName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IntersectEntitySchemaName input parameter</returns>
    public static System.String GetIntersectEntitySchemaName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["IntersectEntitySchemaName"];
    }

    /// <summary>
    /// Gets a value indicating whether the IntersectEntitySchemaName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IntersectEntitySchemaName parameter exists in the input paramater collection</returns>
    public static bool ContainsIntersectEntitySchemaName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IntersectEntitySchemaName");
    }
    /// <summary>
    /// Gets the value of the ManyToManyRelationship input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ManyToManyRelationship input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.ManyToManyRelationshipMetadata GetManyToManyRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.ManyToManyRelationshipMetadata)context.InputParameters["ManyToManyRelationship"];
    }

    /// <summary>
    /// Gets a value indicating whether the ManyToManyRelationship parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ManyToManyRelationship parameter exists in the input paramater collection</returns>
    public static bool ContainsManyToManyRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ManyToManyRelationship");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ManyToManyRelationshipId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ManyToManyRelationshipId output parameter</returns>
    public static System.Guid GetManyToManyRelationshipId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["ManyToManyRelationshipId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ManyToManyRelationshipId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ManyToManyRelationshipId parameter exists in the output paramater collection</returns>
    public static bool ContainsManyToManyRelationshipId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ManyToManyRelationshipId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateOneToMany
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Lookup input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Lookup input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.LookupAttributeMetadata GetLookup(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.LookupAttributeMetadata)context.InputParameters["Lookup"];
    }

    /// <summary>
    /// Gets a value indicating whether the Lookup parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Lookup parameter exists in the input paramater collection</returns>
    public static bool ContainsLookup(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Lookup");
    }
    /// <summary>
    /// Gets the value of the OneToManyRelationship input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OneToManyRelationship input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.OneToManyRelationshipMetadata GetOneToManyRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.OneToManyRelationshipMetadata)context.InputParameters["OneToManyRelationship"];
    }

    /// <summary>
    /// Gets a value indicating whether the OneToManyRelationship parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OneToManyRelationship parameter exists in the input paramater collection</returns>
    public static bool ContainsOneToManyRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OneToManyRelationship");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeId output parameter</returns>
    public static System.Guid GetAttributeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["AttributeId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeId parameter exists in the output paramater collection</returns>
    public static bool ContainsAttributeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AttributeId");
    }
    /// <summary>
    /// Gets the value of the RelationshipId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RelationshipId output parameter</returns>
    public static System.Guid GetRelationshipId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["RelationshipId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RelationshipId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RelationshipId parameter exists in the output paramater collection</returns>
    public static bool ContainsRelationshipId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("RelationshipId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateOptionSet
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OptionSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase GetOptionSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase)context.InputParameters["OptionSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSet parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSet");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OptionSetId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetId output parameter</returns>
    public static System.Guid GetOptionSetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["OptionSetId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetId parameter exists in the output paramater collection</returns>
    public static bool ContainsOptionSetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("OptionSetId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateOrUpdateImportMapFromApp
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColMappingIdsToDelete input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColMappingIdsToDelete input parameter</returns>
    public static System.Guid[] GetColMappingIdsToDelete(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["ColMappingIdsToDelete"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColMappingIdsToDelete parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColMappingIdsToDelete parameter exists in the input paramater collection</returns>
    public static bool ContainsColMappingIdsToDelete(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColMappingIdsToDelete");
    }
    /// <summary>
    /// Gets the value of the MapXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MapXml input parameter</returns>
    public static System.String GetMapXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MapXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the MapXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MapXml parameter exists in the input paramater collection</returns>
    public static bool ContainsMapXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MapXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportMapId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportMapId output parameter</returns>
    public static System.Guid GetImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["ImportMapId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportMapId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportMapId parameter exists in the output paramater collection</returns>
    public static bool ContainsImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ImportMapId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateOutlookSubscriptionSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreatePostRelationships
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateSchedule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }
    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }
    /// <summary>
    /// Gets the value of the ScheduledReportName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ScheduledReportName input parameter</returns>
    public static System.String GetScheduledReportName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ScheduledReportName"];
    }

    /// <summary>
    /// Gets a value indicating whether the ScheduledReportName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ScheduledReportName parameter exists in the input paramater collection</returns>
    public static bool ContainsScheduledReportName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ScheduledReportName");
    }
    /// <summary>
    /// Gets the value of the ScheduleXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ScheduleXml input parameter</returns>
    public static System.String GetScheduleXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ScheduleXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ScheduleXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ScheduleXml parameter exists in the input paramater collection</returns>
    public static bool ContainsScheduleXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ScheduleXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateSubscriptionSyncInfo
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateWithMappingImportMap
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnMappings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnMappings input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetColumnMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["ColumnMappings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnMappings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnMappings parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnMappings");
    }
    /// <summary>
    /// Gets the value of the ImportMap input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportMap input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetImportMap(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["ImportMap"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportMap parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportMap parameter exists in the input paramater collection</returns>
    public static bool ContainsImportMap(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportMap");
    }
    /// <summary>
    /// Gets the value of the LookUpMappings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LookUpMappings input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetLookUpMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["LookUpMappings"];
    }

    /// <summary>
    /// Gets a value indicating whether the LookUpMappings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LookUpMappings parameter exists in the input paramater collection</returns>
    public static bool ContainsLookUpMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LookUpMappings");
    }
    /// <summary>
    /// Gets the value of the OwnerMappings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OwnerMappings input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetOwnerMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["OwnerMappings"];
    }

    /// <summary>
    /// Gets a value indicating whether the OwnerMappings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OwnerMappings parameter exists in the input paramater collection</returns>
    public static bool ContainsOwnerMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OwnerMappings");
    }
    /// <summary>
    /// Gets the value of the PickListMappings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PickListMappings input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetPickListMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["PickListMappings"];
    }

    /// <summary>
    /// Gets a value indicating whether the PickListMappings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PickListMappings parameter exists in the input paramater collection</returns>
    public static bool ContainsPickListMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PickListMappings");
    }
    /// <summary>
    /// Gets the value of the TransformationMappings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TransformationMappings input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetTransformationMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["TransformationMappings"];
    }

    /// <summary>
    /// Gets a value indicating whether the TransformationMappings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TransformationMappings parameter exists in the input paramater collection</returns>
    public static bool ContainsTransformationMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TransformationMappings");
    }
    /// <summary>
    /// Gets the value of the TransformationParameterMappings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TransformationParameterMappings input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetTransformationParameterMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["TransformationParameterMappings"];
    }

    /// <summary>
    /// Gets a value indicating whether the TransformationParameterMappings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TransformationParameterMappings parameter exists in the input paramater collection</returns>
    public static bool ContainsTransformationParameterMappings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TransformationParameterMappings");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Id output parameter</returns>
    public static System.Guid GetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["Id"];
    }

    /// <summary>
    /// Gets a value indicating whether the Id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Id parameter exists in the output paramater collection</returns>
    public static bool ContainsId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateWorkflowFromTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the WorkflowName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the WorkflowName input parameter</returns>
    public static System.String GetWorkflowName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["WorkflowName"];
    }

    /// <summary>
    /// Gets a value indicating whether the WorkflowName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the WorkflowName parameter exists in the input paramater collection</returns>
    public static bool ContainsWorkflowName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("WorkflowName");
    }
    /// <summary>
    /// Gets the value of the WorkflowTemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the WorkflowTemplateId input parameter</returns>
    public static System.Guid GetWorkflowTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["WorkflowTemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the WorkflowTemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the WorkflowTemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsWorkflowTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("WorkflowTemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Id output parameter</returns>
    public static System.Guid GetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["Id"];
    }

    /// <summary>
    /// Gets a value indicating whether the Id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Id parameter exists in the output paramater collection</returns>
    public static bool ContainsId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DebugCacheGetContents
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CacheName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CacheName input parameter</returns>
    public static System.String GetCacheName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CacheName"];
    }

    /// <summary>
    /// Gets a value indicating whether the CacheName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CacheName parameter exists in the input paramater collection</returns>
    public static bool ContainsCacheName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CacheName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DebugCacheGetSize
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CacheName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CacheName input parameter</returns>
    public static System.String GetCacheName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CacheName"];
    }

    /// <summary>
    /// Gets a value indicating whether the CacheName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CacheName parameter exists in the input paramater collection</returns>
    public static bool ContainsCacheName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CacheName");
    }
    /// <summary>
    /// Gets the value of the IncludeLogs input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IncludeLogs input parameter</returns>
    public static System.Boolean GetIncludeLogs(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IncludeLogs"];
    }

    /// <summary>
    /// Gets a value indicating whether the IncludeLogs parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IncludeLogs parameter exists in the input paramater collection</returns>
    public static bool ContainsIncludeLogs(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IncludeLogs");
    }
    /// <summary>
    /// Gets the value of the OutputFormat input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OutputFormat input parameter</returns>
    public static System.String GetOutputFormat(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["OutputFormat"];
    }

    /// <summary>
    /// Gets a value indicating whether the OutputFormat parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OutputFormat parameter exists in the input paramater collection</returns>
    public static bool ContainsOutputFormat(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OutputFormat");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CacheSizeDetails output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CacheSizeDetails output parameter</returns>
    public static System.String GetCacheSizeDetails(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["CacheSizeDetails"];
    }

    /// <summary>
    /// Gets a value indicating whether the CacheSizeDetails parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CacheSizeDetails parameter exists in the output paramater collection</returns>
    public static bool ContainsCacheSizeDetails(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CacheSizeDetails");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DebugFlushCache
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CacheName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CacheName input parameter</returns>
    public static System.String GetCacheName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CacheName"];
    }

    /// <summary>
    /// Gets a value indicating whether the CacheName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CacheName parameter exists in the input paramater collection</returns>
    public static bool ContainsCacheName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CacheName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Delete
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteAttribute
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the LogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LogicalName input parameter</returns>
    public static System.String GetLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["LogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the LogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LogicalName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteAuditData
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EndDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EndDate input parameter</returns>
    public static System.DateTime GetEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["EndDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the EndDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EndDate parameter exists in the input paramater collection</returns>
    public static bool ContainsEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EndDate");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the PartitionsDeleted output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PartitionsDeleted output parameter</returns>
    public static System.Int32 GetPartitionsDeleted(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["PartitionsDeleted"];
    }

    /// <summary>
    /// Gets a value indicating whether the PartitionsDeleted parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PartitionsDeleted parameter exists in the output paramater collection</returns>
    public static bool ContainsPartitionsDeleted(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("PartitionsDeleted");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteEntity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LogicalName input parameter</returns>
    public static System.String GetLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["LogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the LogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LogicalName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteOpenInstances
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SeriesEndDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SeriesEndDate input parameter</returns>
    public static System.DateTime GetSeriesEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["SeriesEndDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the SeriesEndDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SeriesEndDate parameter exists in the input paramater collection</returns>
    public static bool ContainsSeriesEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SeriesEndDate");
    }
    /// <summary>
    /// Gets the value of the StateOfPastInstances input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the StateOfPastInstances input parameter</returns>
    public static System.Int32 GetStateOfPastInstances(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["StateOfPastInstances"];
    }

    /// <summary>
    /// Gets a value indicating whether the StateOfPastInstances parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the StateOfPastInstances parameter exists in the input paramater collection</returns>
    public static bool ContainsStateOfPastInstances(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("StateOfPastInstances");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteOptionSet
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Name input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Name input parameter</returns>
    public static System.String GetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Name"];
    }

    /// <summary>
    /// Gets a value indicating whether the Name parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Name parameter exists in the input paramater collection</returns>
    public static bool ContainsName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Name");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteOptionValue
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeLogicalName input parameter</returns>
    public static System.String GetAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeLogicalName");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the OptionSetName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetName input parameter</returns>
    public static System.String GetOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["OptionSetName"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetName parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSetName");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the Value input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Value input parameter</returns>
    public static System.Int32 GetValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Value"];
    }

    /// <summary>
    /// Gets a value indicating whether the Value parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Value parameter exists in the input paramater collection</returns>
    public static bool ContainsValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Value");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteRelationship
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Name input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Name input parameter</returns>
    public static System.String GetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Name"];
    }

    /// <summary>
    /// Gets a value indicating whether the Name parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Name parameter exists in the input paramater collection</returns>
    public static bool ContainsName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Name");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeleteSubscription
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SubscriptionId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubscriptionId input parameter</returns>
    public static System.Guid GetSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubscriptionId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubscriptionId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubscriptionId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubscriptionId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeliverIncomingEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Attachments input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Attachments input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetAttachments(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["Attachments"];
    }

    /// <summary>
    /// Gets a value indicating whether the Attachments parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Attachments parameter exists in the input paramater collection</returns>
    public static bool ContainsAttachments(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Attachments");
    }
    /// <summary>
    /// Gets the value of the Bcc input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Bcc input parameter</returns>
    public static System.String GetBcc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Bcc"];
    }

    /// <summary>
    /// Gets a value indicating whether the Bcc parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Bcc parameter exists in the input paramater collection</returns>
    public static bool ContainsBcc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Bcc");
    }
    /// <summary>
    /// Gets the value of the Body input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Body input parameter</returns>
    public static System.String GetBody(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Body"];
    }

    /// <summary>
    /// Gets a value indicating whether the Body parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Body parameter exists in the input paramater collection</returns>
    public static bool ContainsBody(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Body");
    }
    /// <summary>
    /// Gets the value of the Cc input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Cc input parameter</returns>
    public static System.String GetCc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Cc"];
    }

    /// <summary>
    /// Gets a value indicating whether the Cc parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Cc parameter exists in the input paramater collection</returns>
    public static bool ContainsCc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Cc");
    }
    /// <summary>
    /// Gets the value of the From input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the From input parameter</returns>
    public static System.String GetFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["From"];
    }

    /// <summary>
    /// Gets a value indicating whether the From parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the From parameter exists in the input paramater collection</returns>
    public static bool ContainsFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("From");
    }
    /// <summary>
    /// Gets the value of the Importance input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Importance input parameter</returns>
    public static System.String GetImportance(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Importance"];
    }

    /// <summary>
    /// Gets a value indicating whether the Importance parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Importance parameter exists in the input paramater collection</returns>
    public static bool ContainsImportance(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Importance");
    }
    /// <summary>
    /// Gets the value of the MessageId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MessageId input parameter</returns>
    public static System.String GetMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MessageId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MessageId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MessageId parameter exists in the input paramater collection</returns>
    public static bool ContainsMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MessageId");
    }
    /// <summary>
    /// Gets the value of the ReceivedOn input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReceivedOn input parameter</returns>
    public static System.DateTime GetReceivedOn(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["ReceivedOn"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReceivedOn parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReceivedOn parameter exists in the input paramater collection</returns>
    public static bool ContainsReceivedOn(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReceivedOn");
    }
    /// <summary>
    /// Gets the value of the Subject input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Subject input parameter</returns>
    public static System.String GetSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Subject"];
    }

    /// <summary>
    /// Gets a value indicating whether the Subject parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Subject parameter exists in the input paramater collection</returns>
    public static bool ContainsSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Subject");
    }
    /// <summary>
    /// Gets the value of the SubmittedBy input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubmittedBy input parameter</returns>
    public static System.String GetSubmittedBy(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SubmittedBy"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubmittedBy parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubmittedBy parameter exists in the input paramater collection</returns>
    public static bool ContainsSubmittedBy(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubmittedBy");
    }
    /// <summary>
    /// Gets the value of the To input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the To input parameter</returns>
    public static System.String GetTo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["To"];
    }

    /// <summary>
    /// Gets a value indicating whether the To parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the To parameter exists in the input paramater collection</returns>
    public static bool ContainsTo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("To");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmailId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmailId output parameter</returns>
    public static System.Guid GetEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["EmailId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmailId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmailId parameter exists in the output paramater collection</returns>
    public static bool ContainsEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EmailId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeliverPromoteEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Attachments input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Attachments input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetAttachments(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["Attachments"];
    }

    /// <summary>
    /// Gets a value indicating whether the Attachments parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Attachments parameter exists in the input paramater collection</returns>
    public static bool ContainsAttachments(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Attachments");
    }
    /// <summary>
    /// Gets the value of the Bcc input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Bcc input parameter</returns>
    public static System.String GetBcc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Bcc"];
    }

    /// <summary>
    /// Gets a value indicating whether the Bcc parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Bcc parameter exists in the input paramater collection</returns>
    public static bool ContainsBcc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Bcc");
    }
    /// <summary>
    /// Gets the value of the Body input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Body input parameter</returns>
    public static System.String GetBody(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Body"];
    }

    /// <summary>
    /// Gets a value indicating whether the Body parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Body parameter exists in the input paramater collection</returns>
    public static bool ContainsBody(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Body");
    }
    /// <summary>
    /// Gets the value of the Cc input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Cc input parameter</returns>
    public static System.String GetCc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Cc"];
    }

    /// <summary>
    /// Gets a value indicating whether the Cc parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Cc parameter exists in the input paramater collection</returns>
    public static bool ContainsCc(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Cc");
    }
    /// <summary>
    /// Gets the value of the EmailId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmailId input parameter</returns>
    public static System.Guid GetEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EmailId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmailId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmailId parameter exists in the input paramater collection</returns>
    public static bool ContainsEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EmailId");
    }
    /// <summary>
    /// Gets the value of the ExtraProperties input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExtraProperties input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetExtraProperties(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["ExtraProperties"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExtraProperties parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExtraProperties parameter exists in the input paramater collection</returns>
    public static bool ContainsExtraProperties(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExtraProperties");
    }
    /// <summary>
    /// Gets the value of the From input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the From input parameter</returns>
    public static System.String GetFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["From"];
    }

    /// <summary>
    /// Gets a value indicating whether the From parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the From parameter exists in the input paramater collection</returns>
    public static bool ContainsFrom(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("From");
    }
    /// <summary>
    /// Gets the value of the Importance input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Importance input parameter</returns>
    public static System.String GetImportance(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Importance"];
    }

    /// <summary>
    /// Gets a value indicating whether the Importance parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Importance parameter exists in the input paramater collection</returns>
    public static bool ContainsImportance(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Importance");
    }
    /// <summary>
    /// Gets the value of the MessageId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MessageId input parameter</returns>
    public static System.String GetMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MessageId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MessageId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MessageId parameter exists in the input paramater collection</returns>
    public static bool ContainsMessageId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MessageId");
    }
    /// <summary>
    /// Gets the value of the ReceivedOn input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReceivedOn input parameter</returns>
    public static System.DateTime GetReceivedOn(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["ReceivedOn"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReceivedOn parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReceivedOn parameter exists in the input paramater collection</returns>
    public static bool ContainsReceivedOn(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReceivedOn");
    }
    /// <summary>
    /// Gets the value of the Subject input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Subject input parameter</returns>
    public static System.String GetSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Subject"];
    }

    /// <summary>
    /// Gets a value indicating whether the Subject parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Subject parameter exists in the input paramater collection</returns>
    public static bool ContainsSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Subject");
    }
    /// <summary>
    /// Gets the value of the SubmittedBy input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubmittedBy input parameter</returns>
    public static System.String GetSubmittedBy(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SubmittedBy"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubmittedBy parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubmittedBy parameter exists in the input paramater collection</returns>
    public static bool ContainsSubmittedBy(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubmittedBy");
    }
    /// <summary>
    /// Gets the value of the To input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the To input parameter</returns>
    public static System.String GetTo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["To"];
    }

    /// <summary>
    /// Gets a value indicating whether the To parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the To parameter exists in the input paramater collection</returns>
    public static bool ContainsTo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("To");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmailId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmailId output parameter</returns>
    public static System.Guid GetEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["EmailId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmailId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmailId parameter exists in the output paramater collection</returns>
    public static bool ContainsEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EmailId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DeprovisionLanguage
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Language input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Language input parameter</returns>
    public static System.Int32 GetLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Language"];
    }

    /// <summary>
    /// Gets a value indicating whether the Language parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Language parameter exists in the input paramater collection</returns>
    public static bool ContainsLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Language");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DetachFromQueueEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmailId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmailId input parameter</returns>
    public static System.Guid GetEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EmailId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmailId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmailId parameter exists in the input paramater collection</returns>
    public static bool ContainsEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EmailId");
    }
    /// <summary>
    /// Gets the value of the QueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueueId input parameter</returns>
    public static System.Guid GetQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueueId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Disassociate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RelatedEntities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RelatedEntities input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReferenceCollection GetRelatedEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReferenceCollection)context.InputParameters["RelatedEntities"];
    }

    /// <summary>
    /// Gets a value indicating whether the RelatedEntities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RelatedEntities parameter exists in the input paramater collection</returns>
    public static bool ContainsRelatedEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RelatedEntities");
    }
    /// <summary>
    /// Gets the value of the Relationship input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Relationship input parameter</returns>
    public static Microsoft.Xrm.Sdk.Relationship GetRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Relationship)context.InputParameters["Relationship"];
    }

    /// <summary>
    /// Gets a value indicating whether the Relationship parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Relationship parameter exists in the input paramater collection</returns>
    public static bool ContainsRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Relationship");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DisassociateEntities
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Moniker1 input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Moniker1 input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetMoniker1(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Moniker1"];
    }

    /// <summary>
    /// Gets a value indicating whether the Moniker1 parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Moniker1 parameter exists in the input paramater collection</returns>
    public static bool ContainsMoniker1(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Moniker1");
    }
    /// <summary>
    /// Gets the value of the Moniker2 input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Moniker2 input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetMoniker2(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Moniker2"];
    }

    /// <summary>
    /// Gets a value indicating whether the Moniker2 parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Moniker2 parameter exists in the input paramater collection</returns>
    public static bool ContainsMoniker2(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Moniker2");
    }
    /// <summary>
    /// Gets the value of the RelationshipName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RelationshipName input parameter</returns>
    public static System.String GetRelationshipName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RelationshipName"];
    }

    /// <summary>
    /// Gets a value indicating whether the RelationshipName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RelationshipName parameter exists in the input paramater collection</returns>
    public static bool ContainsRelationshipName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RelationshipName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DistributeCampaignActivity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Activity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Activity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Activity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Activity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Activity parameter exists in the input paramater collection</returns>
    public static bool ContainsActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Activity");
    }
    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }
    /// <summary>
    /// Gets the value of the Owner input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Owner input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Owner"];
    }

    /// <summary>
    /// Gets a value indicating whether the Owner parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Owner parameter exists in the input paramater collection</returns>
    public static bool ContainsOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Owner");
    }
    /// <summary>
    /// Gets the value of the PostWorkflowEvent input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PostWorkflowEvent input parameter</returns>
    public static System.Boolean GetPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["PostWorkflowEvent"];
    }

    /// <summary>
    /// Gets a value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection</returns>
    public static bool ContainsPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PostWorkflowEvent");
    }
    /// <summary>
    /// Gets the value of the Propagate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Propagate input parameter</returns>
    public static System.Boolean GetPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["Propagate"];
    }

    /// <summary>
    /// Gets a value indicating whether the Propagate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Propagate parameter exists in the input paramater collection</returns>
    public static bool ContainsPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Propagate");
    }
    /// <summary>
    /// Gets the value of the QueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueueId input parameter</returns>
    public static System.Guid GetQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueueId");
    }
    /// <summary>
    /// Gets the value of the SendEmail input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SendEmail input parameter</returns>
    public static System.Boolean GetSendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SendEmail"];
    }

    /// <summary>
    /// Gets a value indicating whether the SendEmail parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SendEmail parameter exists in the input paramater collection</returns>
    public static bool ContainsSendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SendEmail");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId output parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BulkOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DownloadReportDefinition
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BodyText output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BodyText output parameter</returns>
    public static System.String GetBodyText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["BodyText"];
    }

    /// <summary>
    /// Gets a value indicating whether the BodyText parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BodyText parameter exists in the output paramater collection</returns>
    public static bool ContainsBodyText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BodyText");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExecuteByIdSavedQuery
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the String output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the String output parameter</returns>
    public static System.String GetString(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["String"];
    }

    /// <summary>
    /// Gets a value indicating whether the String parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the String parameter exists in the output paramater collection</returns>
    public static bool ContainsString(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("String");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExecuteByIdUserQuery
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the String output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the String output parameter</returns>
    public static System.String GetString(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["String"];
    }

    /// <summary>
    /// Gets a value indicating whether the String parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the String parameter exists in the output paramater collection</returns>
    public static bool ContainsString(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("String");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExecuteCampaignActivity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }
    /// <summary>
    /// Gets the value of the Propagate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Propagate input parameter</returns>
    public static System.Boolean GetPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["Propagate"];
    }

    /// <summary>
    /// Gets a value indicating whether the Propagate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Propagate parameter exists in the input paramater collection</returns>
    public static bool ContainsPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Propagate");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId output parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BulkOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExecuteFetch
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXml input parameter</returns>
    public static System.String GetFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FetchXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXml parameter exists in the input paramater collection</returns>
    public static bool ContainsFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FetchXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXmlResult output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXmlResult output parameter</returns>
    public static System.String GetFetchXmlResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["FetchXmlResult"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXmlResult parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXmlResult parameter exists in the output paramater collection</returns>
    public static bool ContainsFetchXmlResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("FetchXmlResult");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExecuteMultiple
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Requests input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Requests input parameter</returns>
    public static Microsoft.Xrm.Sdk.OrganizationRequestCollection GetRequests(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OrganizationRequestCollection)context.InputParameters["Requests"];
    }

    /// <summary>
    /// Gets a value indicating whether the Requests parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Requests parameter exists in the input paramater collection</returns>
    public static bool ContainsRequests(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Requests");
    }
    /// <summary>
    /// Gets the value of the Settings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Settings input parameter</returns>
    public static Microsoft.Xrm.Sdk.ExecuteMultipleSettings GetSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.ExecuteMultipleSettings)context.InputParameters["Settings"];
    }

    /// <summary>
    /// Gets a value indicating whether the Settings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Settings parameter exists in the input paramater collection</returns>
    public static bool ContainsSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Settings");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsFaulted output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsFaulted output parameter</returns>
    public static System.Boolean GetIsFaulted(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsFaulted"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsFaulted parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsFaulted parameter exists in the output paramater collection</returns>
    public static bool ContainsIsFaulted(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsFaulted");
    }
    /// <summary>
    /// Gets the value of the Responses output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Responses output parameter</returns>
    public static Microsoft.Xrm.Sdk.ExecuteMultipleResponseItemCollection GetResponses(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.ExecuteMultipleResponseItemCollection)context.OutputParameters["Responses"];
    }

    /// <summary>
    /// Gets a value indicating whether the Responses parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Responses parameter exists in the output paramater collection</returns>
    public static bool ContainsResponses(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Responses");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExecuteWorkflow
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }
    /// <summary>
    /// Gets the value of the WorkflowId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the WorkflowId input parameter</returns>
    public static System.Guid GetWorkflowId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["WorkflowId"];
    }

    /// <summary>
    /// Gets a value indicating whether the WorkflowId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the WorkflowId parameter exists in the input paramater collection</returns>
    public static bool ContainsWorkflowId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("WorkflowId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Id output parameter</returns>
    public static System.Guid GetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["Id"];
    }

    /// <summary>
    /// Gets a value indicating whether the Id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Id parameter exists in the output paramater collection</returns>
    public static bool ContainsId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExpandCalendar
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CalendarId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CalendarId input parameter</returns>
    public static System.Guid GetCalendarId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CalendarId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CalendarId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CalendarId parameter exists in the input paramater collection</returns>
    public static bool ContainsCalendarId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CalendarId");
    }
    /// <summary>
    /// Gets the value of the End input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the End input parameter</returns>
    public static System.DateTime GetEnd(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["End"];
    }

    /// <summary>
    /// Gets a value indicating whether the End parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the End parameter exists in the input paramater collection</returns>
    public static bool ContainsEnd(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("End");
    }
    /// <summary>
    /// Gets the value of the Start input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Start input parameter</returns>
    public static System.DateTime GetStart(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["Start"];
    }

    /// <summary>
    /// Gets a value indicating whether the Start parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Start parameter exists in the input paramater collection</returns>
    public static bool ContainsStart(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Start");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExpandWorkflows
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExpansionTaskId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExpansionTaskId input parameter</returns>
    public static System.Guid GetExpansionTaskId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ExpansionTaskId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExpansionTaskId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExpansionTaskId parameter exists in the input paramater collection</returns>
    public static bool ContainsExpansionTaskId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExpansionTaskId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportCompressedAllXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmbeddedFileName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmbeddedFileName input parameter</returns>
    public static System.String GetEmbeddedFileName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EmbeddedFileName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmbeddedFileName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmbeddedFileName parameter exists in the input paramater collection</returns>
    public static bool ContainsEmbeddedFileName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EmbeddedFileName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportCompressedXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportCompressedXml output parameter</returns>
    public static System.Byte[] GetExportCompressedXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["ExportCompressedXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportCompressedXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportCompressedXml parameter exists in the output paramater collection</returns>
    public static bool ContainsExportCompressedXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportCompressedXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportCompressedTranslationsXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmbeddedFileName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmbeddedFileName input parameter</returns>
    public static System.String GetEmbeddedFileName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EmbeddedFileName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmbeddedFileName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmbeddedFileName parameter exists in the input paramater collection</returns>
    public static bool ContainsEmbeddedFileName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EmbeddedFileName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportCompressedXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportCompressedXml output parameter</returns>
    public static System.Byte[] GetExportCompressedXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["ExportCompressedXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportCompressedXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportCompressedXml parameter exists in the output paramater collection</returns>
    public static bool ContainsExportCompressedXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportCompressedXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportCompressedXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmbeddedFileName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmbeddedFileName input parameter</returns>
    public static System.String GetEmbeddedFileName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EmbeddedFileName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmbeddedFileName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmbeddedFileName parameter exists in the input paramater collection</returns>
    public static bool ContainsEmbeddedFileName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EmbeddedFileName");
    }
    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportCompressedXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportCompressedXml output parameter</returns>
    public static System.Byte[] GetExportCompressedXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["ExportCompressedXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportCompressedXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportCompressedXml parameter exists in the output paramater collection</returns>
    public static bool ContainsExportCompressedXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportCompressedXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportFullSolution
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SolutionName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionName input parameter</returns>
    public static System.String GetSolutionName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportSolutionFile output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportSolutionFile output parameter</returns>
    public static System.Byte[] GetExportSolutionFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["ExportSolutionFile"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportSolutionFile parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportSolutionFile parameter exists in the output paramater collection</returns>
    public static bool ContainsExportSolutionFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportSolutionFile");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportLinearMappingsImportMap
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportMapId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportMapId input parameter</returns>
    public static System.Guid GetImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportMapId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportMapId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportMapId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportMapId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MappingsXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MappingsXml output parameter</returns>
    public static System.String GetMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["MappingsXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the MappingsXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MappingsXml parameter exists in the output paramater collection</returns>
    public static bool ContainsMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("MappingsXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportMappingsImportMap
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportIds input parameter</returns>
    public static System.Boolean GetExportIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportIds parameter exists in the input paramater collection</returns>
    public static bool ContainsExportIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportIds");
    }
    /// <summary>
    /// Gets the value of the ImportMapId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportMapId input parameter</returns>
    public static System.Guid GetImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportMapId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportMapId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportMapId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportMapId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MappingsXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MappingsXml output parameter</returns>
    public static System.String GetMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["MappingsXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the MappingsXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MappingsXml parameter exists in the output paramater collection</returns>
    public static bool ContainsMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("MappingsXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportSolution
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportAutoNumberingSettings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportAutoNumberingSettings input parameter</returns>
    public static System.Boolean GetExportAutoNumberingSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportAutoNumberingSettings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportAutoNumberingSettings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportAutoNumberingSettings parameter exists in the input paramater collection</returns>
    public static bool ContainsExportAutoNumberingSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportAutoNumberingSettings");
    }
    /// <summary>
    /// Gets the value of the ExportCalendarSettings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportCalendarSettings input parameter</returns>
    public static System.Boolean GetExportCalendarSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportCalendarSettings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportCalendarSettings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportCalendarSettings parameter exists in the input paramater collection</returns>
    public static bool ContainsExportCalendarSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportCalendarSettings");
    }
    /// <summary>
    /// Gets the value of the ExportCustomizationSettings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportCustomizationSettings input parameter</returns>
    public static System.Boolean GetExportCustomizationSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportCustomizationSettings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportCustomizationSettings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportCustomizationSettings parameter exists in the input paramater collection</returns>
    public static bool ContainsExportCustomizationSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportCustomizationSettings");
    }
    /// <summary>
    /// Gets the value of the ExportEmailTrackingSettings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportEmailTrackingSettings input parameter</returns>
    public static System.Boolean GetExportEmailTrackingSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportEmailTrackingSettings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportEmailTrackingSettings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportEmailTrackingSettings parameter exists in the input paramater collection</returns>
    public static bool ContainsExportEmailTrackingSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportEmailTrackingSettings");
    }
    /// <summary>
    /// Gets the value of the ExportGeneralSettings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportGeneralSettings input parameter</returns>
    public static System.Boolean GetExportGeneralSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportGeneralSettings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportGeneralSettings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportGeneralSettings parameter exists in the input paramater collection</returns>
    public static bool ContainsExportGeneralSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportGeneralSettings");
    }
    /// <summary>
    /// Gets the value of the ExportIsvConfig input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportIsvConfig input parameter</returns>
    public static System.Boolean GetExportIsvConfig(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportIsvConfig"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportIsvConfig parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportIsvConfig parameter exists in the input paramater collection</returns>
    public static bool ContainsExportIsvConfig(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportIsvConfig");
    }
    /// <summary>
    /// Gets the value of the ExportMarketingSettings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportMarketingSettings input parameter</returns>
    public static System.Boolean GetExportMarketingSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportMarketingSettings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportMarketingSettings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportMarketingSettings parameter exists in the input paramater collection</returns>
    public static bool ContainsExportMarketingSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportMarketingSettings");
    }
    /// <summary>
    /// Gets the value of the ExportOutlookSynchronizationSettings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportOutlookSynchronizationSettings input parameter</returns>
    public static System.Boolean GetExportOutlookSynchronizationSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportOutlookSynchronizationSettings"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportOutlookSynchronizationSettings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportOutlookSynchronizationSettings parameter exists in the input paramater collection</returns>
    public static bool ContainsExportOutlookSynchronizationSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportOutlookSynchronizationSettings");
    }
    /// <summary>
    /// Gets the value of the ExportRelationshipRoles input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportRelationshipRoles input parameter</returns>
    public static System.Boolean GetExportRelationshipRoles(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExportRelationshipRoles"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportRelationshipRoles parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportRelationshipRoles parameter exists in the input paramater collection</returns>
    public static bool ContainsExportRelationshipRoles(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExportRelationshipRoles");
    }
    /// <summary>
    /// Gets the value of the Managed input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Managed input parameter</returns>
    public static System.Boolean GetManaged(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["Managed"];
    }

    /// <summary>
    /// Gets a value indicating whether the Managed parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Managed parameter exists in the input paramater collection</returns>
    public static bool ContainsManaged(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Managed");
    }
    /// <summary>
    /// Gets the value of the SolutionName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionName input parameter</returns>
    public static System.String GetSolutionName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportSolutionFile output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportSolutionFile output parameter</returns>
    public static System.Byte[] GetExportSolutionFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["ExportSolutionFile"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportSolutionFile parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportSolutionFile parameter exists in the output paramater collection</returns>
    public static bool ContainsExportSolutionFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportSolutionFile");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportTranslation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SolutionName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionName input parameter</returns>
    public static System.String GetSolutionName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportTranslationFile output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportTranslationFile output parameter</returns>
    public static System.Byte[] GetExportTranslationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["ExportTranslationFile"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportTranslationFile parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportTranslationFile parameter exists in the output paramater collection</returns>
    public static bool ContainsExportTranslationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportTranslationFile");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportXml output parameter</returns>
    public static System.String GetExportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["ExportXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportXml parameter exists in the output paramater collection</returns>
    public static bool ContainsExportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.FetchXmlToQueryExpression
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXml input parameter</returns>
    public static System.String GetFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FetchXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXml parameter exists in the input paramater collection</returns>
    public static bool ContainsFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FetchXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query output parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryExpression GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryExpression)context.OutputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the output paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Query");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.FindParentResourceGroup
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ChildrenIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ChildrenIds input parameter</returns>
    public static System.Guid[] GetChildrenIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["ChildrenIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the ChildrenIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ChildrenIds parameter exists in the input paramater collection</returns>
    public static bool ContainsChildrenIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ChildrenIds");
    }
    /// <summary>
    /// Gets the value of the ParentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParentId input parameter</returns>
    public static System.Guid GetParentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ParentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParentId parameter exists in the input paramater collection</returns>
    public static bool ContainsParentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParentId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the result output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the result output parameter</returns>
    public static System.Boolean Getresult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["result"];
    }

    /// <summary>
    /// Gets a value indicating whether the result parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the result parameter exists in the output paramater collection</returns>
    public static bool Containsresult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("result");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.FireNotificationEvent
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EventData input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EventData input parameter</returns>
    public static System.String GetEventData(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EventData"];
    }

    /// <summary>
    /// Gets a value indicating whether the EventData parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EventData parameter exists in the input paramater collection</returns>
    public static bool ContainsEventData(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EventData");
    }
    /// <summary>
    /// Gets the value of the EventType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EventType input parameter</returns>
    public static System.Int32 GetEventType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["EventType"];
    }

    /// <summary>
    /// Gets a value indicating whether the EventType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EventType parameter exists in the input paramater collection</returns>
    public static bool ContainsEventType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EventType");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.FollowInYammer
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.FulfillSalesOrder
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OrderClose input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OrderClose input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetOrderClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["OrderClose"];
    }

    /// <summary>
    /// Gets a value indicating whether the OrderClose parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OrderClose parameter exists in the input paramater collection</returns>
    public static bool ContainsOrderClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OrderClose");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GenerateInvoiceFromOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the OpportunityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityId input parameter</returns>
    public static System.Guid GetOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OpportunityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GenerateNumber
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AddSuffix input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AddSuffix input parameter</returns>
    public static System.Boolean GetAddSuffix(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["AddSuffix"];
    }

    /// <summary>
    /// Gets a value indicating whether the AddSuffix parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AddSuffix parameter exists in the input paramater collection</returns>
    public static bool ContainsAddSuffix(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AddSuffix");
    }
    /// <summary>
    /// Gets the value of the CurrentNumberName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CurrentNumberName input parameter</returns>
    public static System.String GetCurrentNumberName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CurrentNumberName"];
    }

    /// <summary>
    /// Gets a value indicating whether the CurrentNumberName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CurrentNumberName parameter exists in the input paramater collection</returns>
    public static bool ContainsCurrentNumberName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CurrentNumberName");
    }
    /// <summary>
    /// Gets the value of the PrefixName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PrefixName input parameter</returns>
    public static System.String GetPrefixName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["PrefixName"];
    }

    /// <summary>
    /// Gets a value indicating whether the PrefixName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PrefixName parameter exists in the input paramater collection</returns>
    public static bool ContainsPrefixName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PrefixName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the GeneratedNumber output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the GeneratedNumber output parameter</returns>
    public static System.String GetGeneratedNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["GeneratedNumber"];
    }

    /// <summary>
    /// Gets a value indicating whether the GeneratedNumber parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the GeneratedNumber parameter exists in the output paramater collection</returns>
    public static bool ContainsGeneratedNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("GeneratedNumber");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GenerateQuoteFromOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the OpportunityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityId input parameter</returns>
    public static System.Guid GetOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OpportunityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GenerateSalesOrderFromOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the OpportunityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityId input parameter</returns>
    public static System.Guid GetOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OpportunityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GenerateSnapshot
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetAllTimeZonesWithDisplayName
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LocaleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LocaleId input parameter</returns>
    public static System.Int32 GetLocaleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["LocaleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the LocaleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LocaleId parameter exists in the input paramater collection</returns>
    public static bool ContainsLocaleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LocaleId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetCommitmentSubjects
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ActivityIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ActivityIds input parameter</returns>
    public static System.Guid[] GetActivityIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["ActivityIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the ActivityIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ActivityIds parameter exists in the input paramater collection</returns>
    public static bool ContainsActivityIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ActivityIds");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Subjects output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Subjects output parameter</returns>
    public static System.String[] GetSubjects(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["Subjects"];
    }

    /// <summary>
    /// Gets a value indicating whether the Subjects parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Subjects parameter exists in the output paramater collection</returns>
    public static bool ContainsSubjects(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Subjects");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetComponents
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CustomizationFile input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationFile input parameter</returns>
    public static System.Byte[] GetCustomizationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["CustomizationFile"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationFile parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationFile parameter exists in the input paramater collection</returns>
    public static bool ContainsCustomizationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CustomizationFile");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the GetComponents output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the GetComponents output parameter</returns>
    public static System.String GetGetComponents(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["GetComponents"];
    }

    /// <summary>
    /// Gets a value indicating whether the GetComponents parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the GetComponents parameter exists in the output paramater collection</returns>
    public static bool ContainsGetComponents(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("GetComponents");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetDistinctValuesImportFile
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the columnNumber input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the columnNumber input parameter</returns>
    public static System.Int32 GetcolumnNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["columnNumber"];
    }

    /// <summary>
    /// Gets a value indicating whether the columnNumber parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the columnNumber parameter exists in the input paramater collection</returns>
    public static bool ContainscolumnNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("columnNumber");
    }
    /// <summary>
    /// Gets the value of the ImportFileId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportFileId input parameter</returns>
    public static System.Guid GetImportFileId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportFileId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportFileId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportFileId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportFileId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportFileId");
    }
    /// <summary>
    /// Gets the value of the pageNumber input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the pageNumber input parameter</returns>
    public static System.Int32 GetpageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["pageNumber"];
    }

    /// <summary>
    /// Gets a value indicating whether the pageNumber parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the pageNumber parameter exists in the input paramater collection</returns>
    public static bool ContainspageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("pageNumber");
    }
    /// <summary>
    /// Gets the value of the recordsPerPage input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the recordsPerPage input parameter</returns>
    public static System.Int32 GetrecordsPerPage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["recordsPerPage"];
    }

    /// <summary>
    /// Gets a value indicating whether the recordsPerPage parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the recordsPerPage parameter exists in the input paramater collection</returns>
    public static bool ContainsrecordsPerPage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("recordsPerPage");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Values output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Values output parameter</returns>
    public static System.String[] GetValues(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["Values"];
    }

    /// <summary>
    /// Gets a value indicating whether the Values parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Values parameter exists in the output paramater collection</returns>
    public static bool ContainsValues(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Values");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetEntityWiseDuplicatesCount
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the duplicatesCount output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the duplicatesCount output parameter</returns>
    public static System.Int32[] GetduplicatesCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.OutputParameters["duplicatesCount"];
    }

    /// <summary>
    /// Gets a value indicating whether the duplicatesCount parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the duplicatesCount parameter exists in the output paramater collection</returns>
    public static bool ContainsduplicatesCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("duplicatesCount");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalNames output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalNames output parameter</returns>
    public static System.String[] GetEntityLogicalNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["EntityLogicalNames"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalNames parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalNames parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityLogicalNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityLogicalNames");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetHeaderColumnsImportFile
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportFileId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportFileId input parameter</returns>
    public static System.Guid GetImportFileId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportFileId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportFileId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportFileId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportFileId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportFileId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Columns output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Columns output parameter</returns>
    public static System.String[] GetColumns(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["Columns"];
    }

    /// <summary>
    /// Gets a value indicating whether the Columns parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Columns parameter exists in the output paramater collection</returns>
    public static bool ContainsColumns(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Columns");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetImportableCompressedEntities
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CompressedCustomizationXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CompressedCustomizationXml input parameter</returns>
    public static System.Byte[] GetCompressedCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["CompressedCustomizationXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CompressedCustomizationXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CompressedCustomizationXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCompressedCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CompressedCustomizationXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entities output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entities output parameter</returns>
    public static System.String GetEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Entities"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entities parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entities parameter exists in the output paramater collection</returns>
    public static bool ContainsEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Entities");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetImportableEntities
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CustomizationXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationXml input parameter</returns>
    public static System.String GetCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CustomizationXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CustomizationXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entities output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entities output parameter</returns>
    public static System.String GetEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Entities"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entities parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entities parameter exists in the output paramater collection</returns>
    public static bool ContainsEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Entities");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetInvoiceProductsFromOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the InvoiceId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the InvoiceId input parameter</returns>
    public static System.Guid GetInvoiceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["InvoiceId"];
    }

    /// <summary>
    /// Gets a value indicating whether the InvoiceId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the InvoiceId parameter exists in the input paramater collection</returns>
    public static bool ContainsInvoiceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("InvoiceId");
    }
    /// <summary>
    /// Gets the value of the OpportunityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityId input parameter</returns>
    public static System.Guid GetOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OpportunityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetMailMergeTargetEntityType
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityType output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityType output parameter</returns>
    public static System.Int32 GetEntityType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["EntityType"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityType parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityType parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityType");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetOutlookSyncDataSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BatchSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BatchSize input parameter</returns>
    public static System.Int32 GetBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["BatchSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the BatchSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BatchSize parameter exists in the input paramater collection</returns>
    public static bool ContainsBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BatchSize");
    }
    /// <summary>
    /// Gets the value of the ClientId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientId input parameter</returns>
    public static System.Guid GetClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ClientId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientId parameter exists in the input paramater collection</returns>
    public static bool ContainsClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientId");
    }
    /// <summary>
    /// Gets the value of the ColumnSetXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSetXml input parameter</returns>
    public static System.String GetColumnSetXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ColumnSetXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSetXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSetXml parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSetXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSetXml");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SyncDataXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SyncDataXml output parameter</returns>
    public static System.String GetSyncDataXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["SyncDataXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the SyncDataXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SyncDataXml parameter exists in the output paramater collection</returns>
    public static bool ContainsSyncDataXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SyncDataXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetQuantityDecimal
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ProductId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProductId input parameter</returns>
    public static System.Guid GetProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ProductId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProductId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProductId parameter exists in the input paramater collection</returns>
    public static bool ContainsProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProductId");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }
    /// <summary>
    /// Gets the value of the UoMId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UoMId input parameter</returns>
    public static System.Guid GetUoMId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UoMId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UoMId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UoMId parameter exists in the input paramater collection</returns>
    public static bool ContainsUoMId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UoMId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Quantity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Quantity output parameter</returns>
    public static System.Int32 GetQuantity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["Quantity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Quantity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Quantity parameter exists in the output paramater collection</returns>
    public static bool ContainsQuantity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Quantity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetQuoteProductsFromOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OpportunityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityId input parameter</returns>
    public static System.Guid GetOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OpportunityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityId");
    }
    /// <summary>
    /// Gets the value of the QuoteId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QuoteId input parameter</returns>
    public static System.Guid GetQuoteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QuoteId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QuoteId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QuoteId parameter exists in the input paramater collection</returns>
    public static bool ContainsQuoteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QuoteId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetReportHistoryLimit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the HistoryLimit output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the HistoryLimit output parameter</returns>
    public static System.Int32 GetHistoryLimit(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["HistoryLimit"];
    }

    /// <summary>
    /// Gets a value indicating whether the HistoryLimit parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the HistoryLimit parameter exists in the output paramater collection</returns>
    public static bool ContainsHistoryLimit(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("HistoryLimit");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetReportParameters
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ParametersXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParametersXml output parameter</returns>
    public static System.String GetParametersXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["ParametersXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParametersXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParametersXml parameter exists in the output paramater collection</returns>
    public static bool ContainsParametersXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ParametersXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetSalesOrderProductsFromOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OpportunityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityId input parameter</returns>
    public static System.Guid GetOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OpportunityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityId");
    }
    /// <summary>
    /// Gets the value of the SalesOrderId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SalesOrderId input parameter</returns>
    public static System.Guid GetSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SalesOrderId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SalesOrderId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SalesOrderId parameter exists in the input paramater collection</returns>
    public static bool ContainsSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SalesOrderId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetSyncDataSubscription
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BatchSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BatchSize input parameter</returns>
    public static System.Int32 GetBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["BatchSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the BatchSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BatchSize parameter exists in the input paramater collection</returns>
    public static bool ContainsBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BatchSize");
    }
    /// <summary>
    /// Gets the value of the ColumnSetXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSetXml input parameter</returns>
    public static System.String GetColumnSetXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ColumnSetXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSetXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSetXml parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSetXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSetXml");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }
    /// <summary>
    /// Gets the value of the SubscriptionId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubscriptionId input parameter</returns>
    public static System.Guid GetSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubscriptionId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubscriptionId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubscriptionId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubscriptionId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SyncDataXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SyncDataXml output parameter</returns>
    public static System.String GetSyncDataXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["SyncDataXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the SyncDataXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SyncDataXml parameter exists in the output paramater collection</returns>
    public static bool ContainsSyncDataXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SyncDataXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetTimeZoneCodeByLocalizedName
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LocaleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LocaleId input parameter</returns>
    public static System.Int32 GetLocaleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["LocaleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the LocaleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LocaleId parameter exists in the input paramater collection</returns>
    public static bool ContainsLocaleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LocaleId");
    }
    /// <summary>
    /// Gets the value of the LocalizedStandardName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LocalizedStandardName input parameter</returns>
    public static System.String GetLocalizedStandardName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["LocalizedStandardName"];
    }

    /// <summary>
    /// Gets a value indicating whether the LocalizedStandardName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LocalizedStandardName parameter exists in the input paramater collection</returns>
    public static bool ContainsLocalizedStandardName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LocalizedStandardName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TimeZoneCode output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TimeZoneCode output parameter</returns>
    public static System.Int32 GetTimeZoneCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["TimeZoneCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the TimeZoneCode parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TimeZoneCode parameter exists in the output paramater collection</returns>
    public static bool ContainsTimeZoneCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("TimeZoneCode");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetTrackingTokenEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Subject input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Subject input parameter</returns>
    public static System.String GetSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Subject"];
    }

    /// <summary>
    /// Gets a value indicating whether the Subject parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Subject parameter exists in the input paramater collection</returns>
    public static bool ContainsSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Subject");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TrackingToken output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TrackingToken output parameter</returns>
    public static System.String GetTrackingToken(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["TrackingToken"];
    }

    /// <summary>
    /// Gets a value indicating whether the TrackingToken parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TrackingToken parameter exists in the output paramater collection</returns>
    public static bool ContainsTrackingToken(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("TrackingToken");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetUnprocessedRecords
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Columns input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Columns input parameter</returns>
    public static System.String[] GetColumns(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.InputParameters["Columns"];
    }

    /// <summary>
    /// Gets a value indicating whether the Columns parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Columns parameter exists in the input paramater collection</returns>
    public static bool ContainsColumns(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Columns");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }
    /// <summary>
    /// Gets the value of the PageSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PageSize input parameter</returns>
    public static System.Int32 GetPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["PageSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the PageSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PageSize parameter exists in the input paramater collection</returns>
    public static bool ContainsPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PageSize");
    }
    /// <summary>
    /// Gets the value of the RuleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RuleId input parameter</returns>
    public static System.Guid GetRuleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RuleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RuleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RuleId parameter exists in the input paramater collection</returns>
    public static bool ContainsRuleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RuleId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the UnprocessedRecords output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UnprocessedRecords output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetUnprocessedRecords(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["UnprocessedRecords"];
    }

    /// <summary>
    /// Gets a value indicating whether the UnprocessedRecords parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UnprocessedRecords parameter exists in the output paramater collection</returns>
    public static bool ContainsUnprocessedRecords(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("UnprocessedRecords");
    }
    /// <summary>
    /// Gets the value of the versionNumbers output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the versionNumbers output parameter</returns>
    public static System.String[] GetversionNumbers(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["versionNumbers"];
    }

    /// <summary>
    /// Gets a value indicating whether the versionNumbers parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the versionNumbers parameter exists in the output paramater collection</returns>
    public static bool ContainsversionNumbers(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("versionNumbers");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetValidReferencedEntities
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReferencingEntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReferencingEntityName input parameter</returns>
    public static System.String GetReferencingEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ReferencingEntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReferencingEntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReferencingEntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsReferencingEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReferencingEntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityNames output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityNames output parameter</returns>
    public static System.String[] GetEntityNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["EntityNames"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityNames parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityNames parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityNames");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetValidReferencingEntities
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReferencedEntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReferencedEntityName input parameter</returns>
    public static System.String GetReferencedEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ReferencedEntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReferencedEntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReferencedEntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsReferencedEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReferencedEntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityNames output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityNames output parameter</returns>
    public static System.String[] GetEntityNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["EntityNames"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityNames parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityNames parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityNames");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GrantAccess
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Handle
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SourceQueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SourceQueueId input parameter</returns>
    public static System.Guid GetSourceQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SourceQueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SourceQueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SourceQueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsSourceQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SourceQueueId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportAllXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CustomizationXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationXml input parameter</returns>
    public static System.String GetCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CustomizationXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CustomizationXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportCompressedAllXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CompressedCustomizationXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CompressedCustomizationXml input parameter</returns>
    public static System.Byte[] GetCompressedCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["CompressedCustomizationXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CompressedCustomizationXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CompressedCustomizationXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCompressedCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CompressedCustomizationXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportCompressedTranslationsXmlWithProgress
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CompressedTranslationsXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CompressedTranslationsXml input parameter</returns>
    public static System.Byte[] GetCompressedTranslationsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["CompressedTranslationsXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CompressedTranslationsXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CompressedTranslationsXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCompressedTranslationsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CompressedTranslationsXml");
    }
    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportCompressedXmlWithProgress
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CompressedCustomizationXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CompressedCustomizationXml input parameter</returns>
    public static System.Byte[] GetCompressedCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["CompressedCustomizationXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CompressedCustomizationXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CompressedCustomizationXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCompressedCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CompressedCustomizationXml");
    }
    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }
    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportLinearMappingsImportMap
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MappingsXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MappingsXml input parameter</returns>
    public static System.String GetMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MappingsXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the MappingsXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MappingsXml parameter exists in the input paramater collection</returns>
    public static bool ContainsMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MappingsXml");
    }
    /// <summary>
    /// Gets the value of the ReplaceIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReplaceIds input parameter</returns>
    public static System.Boolean GetReplaceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ReplaceIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReplaceIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReplaceIds parameter exists in the input paramater collection</returns>
    public static bool ContainsReplaceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReplaceIds");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportMapId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportMapId output parameter</returns>
    public static System.Guid GetImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["ImportMapId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportMapId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportMapId parameter exists in the output paramater collection</returns>
    public static bool ContainsImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ImportMapId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportMappingsImportMap
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MappingsXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MappingsXml input parameter</returns>
    public static System.String GetMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MappingsXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the MappingsXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MappingsXml parameter exists in the input paramater collection</returns>
    public static bool ContainsMappingsXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MappingsXml");
    }
    /// <summary>
    /// Gets the value of the ReplaceIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReplaceIds input parameter</returns>
    public static System.Boolean GetReplaceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ReplaceIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReplaceIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReplaceIds parameter exists in the input paramater collection</returns>
    public static bool ContainsReplaceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReplaceIds");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportMapId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportMapId output parameter</returns>
    public static System.Guid GetImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["ImportMapId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportMapId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportMapId parameter exists in the output paramater collection</returns>
    public static bool ContainsImportMapId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ImportMapId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportRecordsImport
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportId input parameter</returns>
    public static System.Guid GetImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AsyncOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AsyncOperationId output parameter</returns>
    public static System.Guid GetAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["AsyncOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AsyncOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AsyncOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AsyncOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportSolution
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ConvertToManaged input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ConvertToManaged input parameter</returns>
    public static System.Boolean GetConvertToManaged(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ConvertToManaged"];
    }

    /// <summary>
    /// Gets a value indicating whether the ConvertToManaged parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ConvertToManaged parameter exists in the input paramater collection</returns>
    public static bool ContainsConvertToManaged(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ConvertToManaged");
    }
    /// <summary>
    /// Gets the value of the CustomizationFile input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationFile input parameter</returns>
    public static System.Byte[] GetCustomizationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["CustomizationFile"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationFile parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationFile parameter exists in the input paramater collection</returns>
    public static bool ContainsCustomizationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CustomizationFile");
    }
    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }
    /// <summary>
    /// Gets the value of the OverwriteUnmanagedCustomizations input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OverwriteUnmanagedCustomizations input parameter</returns>
    public static System.Boolean GetOverwriteUnmanagedCustomizations(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["OverwriteUnmanagedCustomizations"];
    }

    /// <summary>
    /// Gets a value indicating whether the OverwriteUnmanagedCustomizations parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OverwriteUnmanagedCustomizations parameter exists in the input paramater collection</returns>
    public static bool ContainsOverwriteUnmanagedCustomizations(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OverwriteUnmanagedCustomizations");
    }
    /// <summary>
    /// Gets the value of the PublishWorkflows input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PublishWorkflows input parameter</returns>
    public static System.Boolean GetPublishWorkflows(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["PublishWorkflows"];
    }

    /// <summary>
    /// Gets a value indicating whether the PublishWorkflows parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PublishWorkflows parameter exists in the input paramater collection</returns>
    public static bool ContainsPublishWorkflows(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PublishWorkflows");
    }
    /// <summary>
    /// Gets the value of the SkipProductUpdateDependencies input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SkipProductUpdateDependencies input parameter</returns>
    public static System.Boolean GetSkipProductUpdateDependencies(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SkipProductUpdateDependencies"];
    }

    /// <summary>
    /// Gets a value indicating whether the SkipProductUpdateDependencies parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SkipProductUpdateDependencies parameter exists in the input paramater collection</returns>
    public static bool ContainsSkipProductUpdateDependencies(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SkipProductUpdateDependencies");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportTranslation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }
    /// <summary>
    /// Gets the value of the TranslationFile input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TranslationFile input parameter</returns>
    public static System.Byte[] GetTranslationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["TranslationFile"];
    }

    /// <summary>
    /// Gets a value indicating whether the TranslationFile parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TranslationFile parameter exists in the input paramater collection</returns>
    public static bool ContainsTranslationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TranslationFile");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportTranslationsXmlWithProgress
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }
    /// <summary>
    /// Gets the value of the ImportXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportXml input parameter</returns>
    public static System.String GetImportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ImportXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportXml parameter exists in the input paramater collection</returns>
    public static bool ContainsImportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CustomizationXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationXml input parameter</returns>
    public static System.String GetCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CustomizationXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CustomizationXml");
    }
    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ImportXmlWithProgress
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CustomizationXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationXml input parameter</returns>
    public static System.String GetCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["CustomizationXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationXml parameter exists in the input paramater collection</returns>
    public static bool ContainsCustomizationXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CustomizationXml");
    }
    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }
    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.InitializeFrom
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityMoniker input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMoniker input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["EntityMoniker"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMoniker parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMoniker parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityMoniker");
    }
    /// <summary>
    /// Gets the value of the TargetEntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TargetEntityName input parameter</returns>
    public static System.String GetTargetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["TargetEntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the TargetEntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TargetEntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsTargetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TargetEntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the output paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Entity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.InsertOptionValue
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeLogicalName input parameter</returns>
    public static System.String GetAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeLogicalName");
    }
    /// <summary>
    /// Gets the value of the Description input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Description input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Description"];
    }

    /// <summary>
    /// Gets a value indicating whether the Description parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Description parameter exists in the input paramater collection</returns>
    public static bool ContainsDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Description");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the Label input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Label input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Label"];
    }

    /// <summary>
    /// Gets a value indicating whether the Label parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Label parameter exists in the input paramater collection</returns>
    public static bool ContainsLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Label");
    }
    /// <summary>
    /// Gets the value of the OptionSetName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetName input parameter</returns>
    public static System.String GetOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["OptionSetName"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetName parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSetName");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the Value input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Value input parameter</returns>
    public static int? GetValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (int?)context.InputParameters["Value"];
    }

    /// <summary>
    /// Gets a value indicating whether the Value parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Value parameter exists in the input paramater collection</returns>
    public static bool ContainsValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Value");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the NewOptionValue output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewOptionValue output parameter</returns>
    public static System.Int32 GetNewOptionValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["NewOptionValue"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewOptionValue parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewOptionValue parameter exists in the output paramater collection</returns>
    public static bool ContainsNewOptionValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("NewOptionValue");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.InsertStatusValue
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeLogicalName input parameter</returns>
    public static System.String GetAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeLogicalName");
    }
    /// <summary>
    /// Gets the value of the Description input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Description input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Description"];
    }

    /// <summary>
    /// Gets a value indicating whether the Description parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Description parameter exists in the input paramater collection</returns>
    public static bool ContainsDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Description");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the Label input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Label input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Label"];
    }

    /// <summary>
    /// Gets a value indicating whether the Label parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Label parameter exists in the input paramater collection</returns>
    public static bool ContainsLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Label");
    }
    /// <summary>
    /// Gets the value of the OptionSetName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetName input parameter</returns>
    public static System.String GetOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["OptionSetName"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetName parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSetName");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the StateCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the StateCode input parameter</returns>
    public static System.Int32 GetStateCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["StateCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the StateCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the StateCode parameter exists in the input paramater collection</returns>
    public static bool ContainsStateCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("StateCode");
    }
    /// <summary>
    /// Gets the value of the Value input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Value input parameter</returns>
    public static int? GetValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (int?)context.InputParameters["Value"];
    }

    /// <summary>
    /// Gets a value indicating whether the Value parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Value parameter exists in the input paramater collection</returns>
    public static bool ContainsValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Value");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the NewOptionValue output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewOptionValue output parameter</returns>
    public static System.Int32 GetNewOptionValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["NewOptionValue"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewOptionValue parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewOptionValue parameter exists in the output paramater collection</returns>
    public static bool ContainsNewOptionValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("NewOptionValue");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.InstantiateFilters
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TemplateCollection input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateCollection input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReferenceCollection GetTemplateCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReferenceCollection)context.InputParameters["TemplateCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateCollection parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateCollection parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateCollection");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.InstantiateTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ObjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ObjectId input parameter</returns>
    public static System.Guid GetObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ObjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ObjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ObjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ObjectId");
    }
    /// <summary>
    /// Gets the value of the ObjectType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ObjectType input parameter</returns>
    public static System.String GetObjectType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ObjectType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ObjectType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ObjectType parameter exists in the input paramater collection</returns>
    public static bool ContainsObjectType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ObjectType");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.InviteUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the InvitationToken output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the InvitationToken output parameter</returns>
    public static System.String GetInvitationToken(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["InvitationToken"];
    }

    /// <summary>
    /// Gets a value indicating whether the InvitationToken parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the InvitationToken parameter exists in the output paramater collection</returns>
    public static bool ContainsInvitationToken(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("InvitationToken");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsComponentCustomizable
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ComponentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentId input parameter</returns>
    public static System.Guid GetComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ComponentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentId parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentId");
    }
    /// <summary>
    /// Gets the value of the ComponentType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentType input parameter</returns>
    public static System.Int32 GetComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ComponentType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentType parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentType");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsComponentCustomizable output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsComponentCustomizable output parameter</returns>
    public static System.Boolean GetIsComponentCustomizable(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsComponentCustomizable"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsComponentCustomizable parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsComponentCustomizable parameter exists in the output paramater collection</returns>
    public static bool ContainsIsComponentCustomizable(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsComponentCustomizable");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsPrimaryClientSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ClientId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientId input parameter</returns>
    public static System.Guid GetClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ClientId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientId parameter exists in the input paramater collection</returns>
    public static bool ContainsClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the isPrimaryClient output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the isPrimaryClient output parameter</returns>
    public static System.Boolean GetisPrimaryClient(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["isPrimaryClient"];
    }

    /// <summary>
    /// Gets a value indicating whether the isPrimaryClient parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the isPrimaryClient parameter exists in the output paramater collection</returns>
    public static bool ContainsisPrimaryClient(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("isPrimaryClient");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsReportingDataConnectorInstalled
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DataProviderType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DataProviderType input parameter</returns>
    public static System.Int32 GetDataProviderType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["DataProviderType"];
    }

    /// <summary>
    /// Gets a value indicating whether the DataProviderType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DataProviderType parameter exists in the input paramater collection</returns>
    public static bool ContainsDataProviderType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DataProviderType");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsReportingDataConnectorInstalled output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsReportingDataConnectorInstalled output parameter</returns>
    public static System.Boolean GetIsReportingDataConnectorInstalled(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsReportingDataConnectorInstalled"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsReportingDataConnectorInstalled parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsReportingDataConnectorInstalled parameter exists in the output paramater collection</returns>
    public static bool ContainsIsReportingDataConnectorInstalled(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsReportingDataConnectorInstalled");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsSupportUserRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RoleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleId input parameter</returns>
    public static System.Guid GetRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RoleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleId parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SupportUserRole output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SupportUserRole output parameter</returns>
    public static System.Boolean GetSupportUserRole(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["SupportUserRole"];
    }

    /// <summary>
    /// Gets a value indicating whether the SupportUserRole parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SupportUserRole parameter exists in the output paramater collection</returns>
    public static bool ContainsSupportUserRole(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SupportUserRole");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsSystemAdministratorRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RoleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleId input parameter</returns>
    public static System.Guid GetRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RoleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleId parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SystemAdministratorRole output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SystemAdministratorRole output parameter</returns>
    public static System.Boolean GetSystemAdministratorRole(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["SystemAdministratorRole"];
    }

    /// <summary>
    /// Gets a value indicating whether the SystemAdministratorRole parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SystemAdministratorRole parameter exists in the output paramater collection</returns>
    public static bool ContainsSystemAdministratorRole(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SystemAdministratorRole");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsValidStateTransition
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }
    /// <summary>
    /// Gets the value of the NewState input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewState input parameter</returns>
    public static System.String GetNewState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["NewState"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewState parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewState parameter exists in the input paramater collection</returns>
    public static bool ContainsNewState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("NewState");
    }
    /// <summary>
    /// Gets the value of the NewStatus input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewStatus input parameter</returns>
    public static System.Int32 GetNewStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["NewStatus"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewStatus parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewStatus parameter exists in the input paramater collection</returns>
    public static bool ContainsNewStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("NewStatus");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsValid output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsValid output parameter</returns>
    public static System.Boolean GetIsValid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsValid"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsValid parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsValid parameter exists in the output paramater collection</returns>
    public static bool ContainsIsValid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsValid");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ListSnapshots
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CreatedDates output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CreatedDates output parameter</returns>
    public static System.DateTime[] GetCreatedDates(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime[])context.OutputParameters["CreatedDates"];
    }

    /// <summary>
    /// Gets a value indicating whether the CreatedDates parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CreatedDates parameter exists in the output paramater collection</returns>
    public static bool ContainsCreatedDates(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CreatedDates");
    }
    /// <summary>
    /// Gets the value of the HistoryIds output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the HistoryIds output parameter</returns>
    public static System.String[] GetHistoryIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["HistoryIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the HistoryIds parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the HistoryIds parameter exists in the output paramater collection</returns>
    public static bool ContainsHistoryIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("HistoryIds");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.LocalTimeFromUtcTime
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TimeZoneCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TimeZoneCode input parameter</returns>
    public static System.Int32 GetTimeZoneCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["TimeZoneCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the TimeZoneCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TimeZoneCode parameter exists in the input paramater collection</returns>
    public static bool ContainsTimeZoneCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TimeZoneCode");
    }
    /// <summary>
    /// Gets the value of the UtcTime input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UtcTime input parameter</returns>
    public static System.DateTime GetUtcTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["UtcTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the UtcTime parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UtcTime parameter exists in the input paramater collection</returns>
    public static bool ContainsUtcTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UtcTime");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LocalTime output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LocalTime output parameter</returns>
    public static System.DateTime GetLocalTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.OutputParameters["LocalTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the LocalTime parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LocalTime parameter exists in the output paramater collection</returns>
    public static bool ContainsLocalTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("LocalTime");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.LockInvoicePricing
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the InvoiceId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the InvoiceId input parameter</returns>
    public static System.Guid GetInvoiceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["InvoiceId"];
    }

    /// <summary>
    /// Gets a value indicating whether the InvoiceId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the InvoiceId parameter exists in the input paramater collection</returns>
    public static bool ContainsInvoiceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("InvoiceId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.LockSalesOrderPricing
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SalesOrderId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SalesOrderId input parameter</returns>
    public static System.Guid GetSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SalesOrderId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SalesOrderId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SalesOrderId parameter exists in the input paramater collection</returns>
    public static bool ContainsSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SalesOrderId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.LogFailureBulkOperation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AdditionalInfo input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AdditionalInfo input parameter</returns>
    public static System.String GetAdditionalInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AdditionalInfo"];
    }

    /// <summary>
    /// Gets a value indicating whether the AdditionalInfo parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AdditionalInfo parameter exists in the input paramater collection</returns>
    public static bool ContainsAdditionalInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AdditionalInfo");
    }
    /// <summary>
    /// Gets the value of the BulkOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId input parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationId");
    }
    /// <summary>
    /// Gets the value of the ErrorCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ErrorCode input parameter</returns>
    public static System.Int32 GetErrorCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ErrorCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the ErrorCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ErrorCode parameter exists in the input paramater collection</returns>
    public static bool ContainsErrorCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ErrorCode");
    }
    /// <summary>
    /// Gets the value of the Message input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Message input parameter</returns>
    public static System.String GetMessage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Message"];
    }

    /// <summary>
    /// Gets a value indicating whether the Message parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Message parameter exists in the input paramater collection</returns>
    public static bool ContainsMessage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Message");
    }
    /// <summary>
    /// Gets the value of the RegardingObjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingObjectId input parameter</returns>
    public static System.Guid GetRegardingObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RegardingObjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingObjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingObjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingObjectId");
    }
    /// <summary>
    /// Gets the value of the RegardingObjectTypeCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingObjectTypeCode input parameter</returns>
    public static System.Int32 GetRegardingObjectTypeCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["RegardingObjectTypeCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingObjectTypeCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingObjectTypeCode parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingObjectTypeCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingObjectTypeCode");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.LogSuccessBulkOperation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AdditionalInfo input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AdditionalInfo input parameter</returns>
    public static System.String GetAdditionalInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AdditionalInfo"];
    }

    /// <summary>
    /// Gets a value indicating whether the AdditionalInfo parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AdditionalInfo parameter exists in the input paramater collection</returns>
    public static bool ContainsAdditionalInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AdditionalInfo");
    }
    /// <summary>
    /// Gets the value of the BulkOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId input parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationId");
    }
    /// <summary>
    /// Gets the value of the CreatedObjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CreatedObjectId input parameter</returns>
    public static System.Guid GetCreatedObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CreatedObjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CreatedObjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CreatedObjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsCreatedObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CreatedObjectId");
    }
    /// <summary>
    /// Gets the value of the CreatedObjectTypeCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CreatedObjectTypeCode input parameter</returns>
    public static System.Int32 GetCreatedObjectTypeCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["CreatedObjectTypeCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the CreatedObjectTypeCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CreatedObjectTypeCode parameter exists in the input paramater collection</returns>
    public static bool ContainsCreatedObjectTypeCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CreatedObjectTypeCode");
    }
    /// <summary>
    /// Gets the value of the RegardingObjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingObjectId input parameter</returns>
    public static System.Guid GetRegardingObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RegardingObjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingObjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingObjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingObjectId");
    }
    /// <summary>
    /// Gets the value of the RegardingObjectTypeCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingObjectTypeCode input parameter</returns>
    public static System.Int32 GetRegardingObjectTypeCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["RegardingObjectTypeCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingObjectTypeCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingObjectTypeCode parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingObjectTypeCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingObjectTypeCode");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.LoseOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OpportunityClose input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityClose input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetOpportunityClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["OpportunityClose"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityClose parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityClose parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityClose");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.MakeAvailableToOrganizationReport
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.MakeAvailableToOrganizationTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.MakeUnavailableToOrganizationReport
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.MakeUnavailableToOrganizationTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Merge
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the PerformParentingChecks input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PerformParentingChecks input parameter</returns>
    public static System.Boolean GetPerformParentingChecks(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["PerformParentingChecks"];
    }

    /// <summary>
    /// Gets a value indicating whether the PerformParentingChecks parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PerformParentingChecks parameter exists in the input paramater collection</returns>
    public static bool ContainsPerformParentingChecks(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PerformParentingChecks");
    }
    /// <summary>
    /// Gets the value of the SubordinateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubordinateId input parameter</returns>
    public static System.Guid GetSubordinateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubordinateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubordinateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubordinateId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubordinateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubordinateId");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }
    /// <summary>
    /// Gets the value of the UpdateContent input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UpdateContent input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetUpdateContent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["UpdateContent"];
    }

    /// <summary>
    /// Gets a value indicating whether the UpdateContent parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UpdateContent parameter exists in the input paramater collection</returns>
    public static bool ContainsUpdateContent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UpdateContent");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ModifyAccess
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.MyCreateActivitiesList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FriendlyName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FriendlyName input parameter</returns>
    public static System.String GetFriendlyName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FriendlyName"];
    }

    /// <summary>
    /// Gets a value indicating whether the FriendlyName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FriendlyName parameter exists in the input paramater collection</returns>
    public static bool ContainsFriendlyName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FriendlyName");
    }
    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }
    /// <summary>
    /// Gets the value of the PostWorkflowEvent input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PostWorkflowEvent input parameter</returns>
    public static System.Boolean GetPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["PostWorkflowEvent"];
    }

    /// <summary>
    /// Gets a value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection</returns>
    public static bool ContainsPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PostWorkflowEvent");
    }
    /// <summary>
    /// Gets the value of the Propagate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Propagate input parameter</returns>
    public static System.Boolean GetPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["Propagate"];
    }

    /// <summary>
    /// Gets a value indicating whether the Propagate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Propagate parameter exists in the input paramater collection</returns>
    public static bool ContainsPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Propagate");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId output parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BulkOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.MyExecuteCampaignActivity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ActivityXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ActivityXml input parameter</returns>
    public static System.String GetActivityXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ActivityXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ActivityXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ActivityXml parameter exists in the input paramater collection</returns>
    public static bool ContainsActivityXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ActivityXml");
    }
    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }
    /// <summary>
    /// Gets the value of the Owner input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Owner input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Owner"];
    }

    /// <summary>
    /// Gets a value indicating whether the Owner parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Owner parameter exists in the input paramater collection</returns>
    public static bool ContainsOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Owner");
    }
    /// <summary>
    /// Gets the value of the PostWorkflowEvent input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PostWorkflowEvent input parameter</returns>
    public static System.Boolean GetPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["PostWorkflowEvent"];
    }

    /// <summary>
    /// Gets a value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection</returns>
    public static bool ContainsPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PostWorkflowEvent");
    }
    /// <summary>
    /// Gets the value of the Propagate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Propagate input parameter</returns>
    public static System.Boolean GetPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["Propagate"];
    }

    /// <summary>
    /// Gets a value indicating whether the Propagate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Propagate parameter exists in the input paramater collection</returns>
    public static bool ContainsPropagate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Propagate");
    }
    /// <summary>
    /// Gets the value of the QueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueueId input parameter</returns>
    public static System.Guid GetQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueueId");
    }
    /// <summary>
    /// Gets the value of the SendEmail input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SendEmail input parameter</returns>
    public static System.Boolean GetSendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SendEmail"];
    }

    /// <summary>
    /// Gets a value indicating whether the SendEmail parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SendEmail parameter exists in the input paramater collection</returns>
    public static bool ContainsSendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SendEmail");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId output parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BulkOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.OrderOption
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeLogicalName input parameter</returns>
    public static System.String GetAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeLogicalName");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the OptionSetName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetName input parameter</returns>
    public static System.String GetOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["OptionSetName"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetName parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSetName");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the Values input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Values input parameter</returns>
    public static System.Int32[] GetValues(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.InputParameters["Values"];
    }

    /// <summary>
    /// Gets a value indicating whether the Values parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Values parameter exists in the input paramater collection</returns>
    public static bool ContainsValues(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Values");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ParseImport
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportId input parameter</returns>
    public static System.Guid GetImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AsyncOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AsyncOperationId output parameter</returns>
    public static System.Guid GetAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["AsyncOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AsyncOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AsyncOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AsyncOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PostOutlookSyncSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BatchSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BatchSize input parameter</returns>
    public static System.Int32 GetBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["BatchSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the BatchSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BatchSize parameter exists in the input paramater collection</returns>
    public static bool ContainsBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BatchSize");
    }
    /// <summary>
    /// Gets the value of the ClientId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientId input parameter</returns>
    public static System.Guid GetClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ClientId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientId parameter exists in the input paramater collection</returns>
    public static bool ContainsClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientId");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PostSyncSubscription
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BatchSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BatchSize input parameter</returns>
    public static System.Int32 GetBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["BatchSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the BatchSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BatchSize parameter exists in the input paramater collection</returns>
    public static bool ContainsBatchSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BatchSize");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }
    /// <summary>
    /// Gets the value of the SubscriptionId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubscriptionId input parameter</returns>
    public static System.Guid GetSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubscriptionId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubscriptionId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubscriptionId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubscriptionId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PrepareOutlookSyncSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ClientId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientId input parameter</returns>
    public static System.Guid GetClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ClientId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientId parameter exists in the input paramater collection</returns>
    public static bool ContainsClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientId");
    }
    /// <summary>
    /// Gets the value of the Type input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Type input parameter</returns>
    public static System.Int32 GetType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Type"];
    }

    /// <summary>
    /// Gets a value indicating whether the Type parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Type parameter exists in the input paramater collection</returns>
    public static bool ContainsType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Type");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SyncInfoXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SyncInfoXml output parameter</returns>
    public static System.String GetSyncInfoXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["SyncInfoXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the SyncInfoXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SyncInfoXml parameter exists in the output paramater collection</returns>
    public static bool ContainsSyncInfoXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SyncInfoXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PrepareSyncSubscription
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SubscriptionId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubscriptionId input parameter</returns>
    public static System.Guid GetSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubscriptionId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubscriptionId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubscriptionId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubscriptionId");
    }
    /// <summary>
    /// Gets the value of the Type input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Type input parameter</returns>
    public static System.Int32 GetType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Type"];
    }

    /// <summary>
    /// Gets a value indicating whether the Type parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Type parameter exists in the input paramater collection</returns>
    public static bool ContainsType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Type");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SyncInfoXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SyncInfoXml output parameter</returns>
    public static System.String GetSyncInfoXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["SyncInfoXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the SyncInfoXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SyncInfoXml parameter exists in the output paramater collection</returns>
    public static bool ContainsSyncInfoXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SyncInfoXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ProcessInboundEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the InboundEmailActivity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the InboundEmailActivity input parameter</returns>
    public static System.Guid GetInboundEmailActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["InboundEmailActivity"];
    }

    /// <summary>
    /// Gets a value indicating whether the InboundEmailActivity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the InboundEmailActivity parameter exists in the input paramater collection</returns>
    public static bool ContainsInboundEmailActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("InboundEmailActivity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ProcessOneMemberBulkOperation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId input parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationId");
    }
    /// <summary>
    /// Gets the value of the BulkOperationSource input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationSource input parameter</returns>
    public static System.Int32 GetBulkOperationSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["BulkOperationSource"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationSource parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationSource parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationSource");
    }
    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ProcessResult output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProcessResult output parameter</returns>
    public static System.Int32 GetProcessResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["ProcessResult"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProcessResult parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProcessResult parameter exists in the output paramater collection</returns>
    public static bool ContainsProcessResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ProcessResult");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ProcessReplicationBacklog
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PromoteToAdmin
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PropagateByExpression
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Activity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Activity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Activity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Activity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Activity parameter exists in the input paramater collection</returns>
    public static bool ContainsActivity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Activity");
    }
    /// <summary>
    /// Gets the value of the ExecuteImmediately input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExecuteImmediately input parameter</returns>
    public static System.Boolean GetExecuteImmediately(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["ExecuteImmediately"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExecuteImmediately parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExecuteImmediately parameter exists in the input paramater collection</returns>
    public static bool ContainsExecuteImmediately(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ExecuteImmediately");
    }
    /// <summary>
    /// Gets the value of the FriendlyName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FriendlyName input parameter</returns>
    public static System.String GetFriendlyName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FriendlyName"];
    }

    /// <summary>
    /// Gets a value indicating whether the FriendlyName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FriendlyName parameter exists in the input paramater collection</returns>
    public static bool ContainsFriendlyName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FriendlyName");
    }
    /// <summary>
    /// Gets the value of the Owner input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Owner input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Owner"];
    }

    /// <summary>
    /// Gets a value indicating whether the Owner parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Owner parameter exists in the input paramater collection</returns>
    public static bool ContainsOwner(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Owner");
    }
    /// <summary>
    /// Gets the value of the PostWorkflowEvent input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PostWorkflowEvent input parameter</returns>
    public static System.Boolean GetPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["PostWorkflowEvent"];
    }

    /// <summary>
    /// Gets a value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PostWorkflowEvent parameter exists in the input paramater collection</returns>
    public static bool ContainsPostWorkflowEvent(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PostWorkflowEvent");
    }
    /// <summary>
    /// Gets the value of the QueryExpression input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueryExpression input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["QueryExpression"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueryExpression parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueryExpression parameter exists in the input paramater collection</returns>
    public static bool ContainsQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueryExpression");
    }
    /// <summary>
    /// Gets the value of the QueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueueId input parameter</returns>
    public static System.Guid GetQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueueId");
    }
    /// <summary>
    /// Gets the value of the SendEmail input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SendEmail input parameter</returns>
    public static System.Boolean GetSendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SendEmail"];
    }

    /// <summary>
    /// Gets a value indicating whether the SendEmail parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SendEmail parameter exists in the input paramater collection</returns>
    public static bool ContainsSendEmail(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SendEmail");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId output parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BulkOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ProvisionLanguage
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Language input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Language input parameter</returns>
    public static System.Int32 GetLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Language"];
    }

    /// <summary>
    /// Gets a value indicating whether the Language parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Language parameter exists in the input paramater collection</returns>
    public static bool ContainsLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Language");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PublishDuplicateRule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DuplicateRuleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DuplicateRuleId input parameter</returns>
    public static System.Guid GetDuplicateRuleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["DuplicateRuleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the DuplicateRuleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DuplicateRuleId parameter exists in the input paramater collection</returns>
    public static bool ContainsDuplicateRuleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DuplicateRuleId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the JobId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the JobId output parameter</returns>
    public static System.Guid GetJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["JobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the JobId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the JobId parameter exists in the output paramater collection</returns>
    public static bool ContainsJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("JobId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PublishExternal
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.PublishXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.QualifyLead
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CreateAccount input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CreateAccount input parameter</returns>
    public static System.Boolean GetCreateAccount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["CreateAccount"];
    }

    /// <summary>
    /// Gets a value indicating whether the CreateAccount parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CreateAccount parameter exists in the input paramater collection</returns>
    public static bool ContainsCreateAccount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CreateAccount");
    }
    /// <summary>
    /// Gets the value of the CreateContact input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CreateContact input parameter</returns>
    public static System.Boolean GetCreateContact(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["CreateContact"];
    }

    /// <summary>
    /// Gets a value indicating whether the CreateContact parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CreateContact parameter exists in the input paramater collection</returns>
    public static bool ContainsCreateContact(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CreateContact");
    }
    /// <summary>
    /// Gets the value of the CreateOpportunity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CreateOpportunity input parameter</returns>
    public static System.Boolean GetCreateOpportunity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["CreateOpportunity"];
    }

    /// <summary>
    /// Gets a value indicating whether the CreateOpportunity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CreateOpportunity parameter exists in the input paramater collection</returns>
    public static bool ContainsCreateOpportunity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CreateOpportunity");
    }
    /// <summary>
    /// Gets the value of the LeadId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LeadId input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetLeadId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["LeadId"];
    }

    /// <summary>
    /// Gets a value indicating whether the LeadId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LeadId parameter exists in the input paramater collection</returns>
    public static bool ContainsLeadId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LeadId");
    }
    /// <summary>
    /// Gets the value of the OpportunityCurrencyId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityCurrencyId input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetOpportunityCurrencyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["OpportunityCurrencyId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityCurrencyId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityCurrencyId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityCurrencyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityCurrencyId");
    }
    /// <summary>
    /// Gets the value of the OpportunityCustomerId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityCustomerId input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetOpportunityCustomerId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["OpportunityCustomerId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityCustomerId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityCustomerId parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityCustomerId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityCustomerId");
    }
    /// <summary>
    /// Gets the value of the SourceCampaignId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SourceCampaignId input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetSourceCampaignId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["SourceCampaignId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SourceCampaignId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SourceCampaignId parameter exists in the input paramater collection</returns>
    public static bool ContainsSourceCampaignId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SourceCampaignId");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }
    /// <summary>
    /// Gets the value of the SuppressDuplicateDetection input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SuppressDuplicateDetection input parameter</returns>
    public static System.Boolean GetSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SuppressDuplicateDetection"];
    }

    /// <summary>
    /// Gets a value indicating whether the SuppressDuplicateDetection parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SuppressDuplicateDetection parameter exists in the input paramater collection</returns>
    public static bool ContainsSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SuppressDuplicateDetection");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CreatedEntities output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CreatedEntities output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReferenceCollection GetCreatedEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReferenceCollection)context.OutputParameters["CreatedEntities"];
    }

    /// <summary>
    /// Gets a value indicating whether the CreatedEntities parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CreatedEntities parameter exists in the output paramater collection</returns>
    public static bool ContainsCreatedEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CreatedEntities");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.QualifyMemberList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }
    /// <summary>
    /// Gets the value of the MembersId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MembersId input parameter</returns>
    public static System.Guid[] GetMembersId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["MembersId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MembersId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MembersId parameter exists in the input paramater collection</returns>
    public static bool ContainsMembersId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MembersId");
    }
    /// <summary>
    /// Gets the value of the OverrideorRemove input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OverrideorRemove input parameter</returns>
    public static System.Boolean GetOverrideorRemove(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["OverrideorRemove"];
    }

    /// <summary>
    /// Gets a value indicating whether the OverrideorRemove parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OverrideorRemove parameter exists in the input paramater collection</returns>
    public static bool ContainsOverrideorRemove(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OverrideorRemove");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.QueryExpressionToFetchXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXml output parameter</returns>
    public static System.String GetFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["FetchXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXml parameter exists in the output paramater collection</returns>
    public static bool ContainsFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("FetchXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.QueryMultipleSchedules
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the End input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the End input parameter</returns>
    public static System.DateTime GetEnd(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["End"];
    }

    /// <summary>
    /// Gets a value indicating whether the End parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the End parameter exists in the input paramater collection</returns>
    public static bool ContainsEnd(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("End");
    }
    /// <summary>
    /// Gets the value of the ResourceIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ResourceIds input parameter</returns>
    public static System.Guid[] GetResourceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["ResourceIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the ResourceIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ResourceIds parameter exists in the input paramater collection</returns>
    public static bool ContainsResourceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ResourceIds");
    }
    /// <summary>
    /// Gets the value of the Start input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Start input parameter</returns>
    public static System.DateTime GetStart(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["Start"];
    }

    /// <summary>
    /// Gets a value indicating whether the Start parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Start parameter exists in the input paramater collection</returns>
    public static bool ContainsStart(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Start");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.QuerySchedule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the End input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the End input parameter</returns>
    public static System.DateTime GetEnd(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["End"];
    }

    /// <summary>
    /// Gets a value indicating whether the End parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the End parameter exists in the input paramater collection</returns>
    public static bool ContainsEnd(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("End");
    }
    /// <summary>
    /// Gets the value of the ResourceId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ResourceId input parameter</returns>
    public static System.Guid GetResourceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ResourceId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ResourceId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ResourceId parameter exists in the input paramater collection</returns>
    public static bool ContainsResourceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ResourceId");
    }
    /// <summary>
    /// Gets the value of the Start input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Start input parameter</returns>
    public static System.DateTime GetStart(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["Start"];
    }

    /// <summary>
    /// Gets a value indicating whether the Start parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Start parameter exists in the input paramater collection</returns>
    public static bool ContainsStart(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Start");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ReassignObjectsOwner
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FromPrincipal input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FromPrincipal input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetFromPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["FromPrincipal"];
    }

    /// <summary>
    /// Gets a value indicating whether the FromPrincipal parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FromPrincipal parameter exists in the input paramater collection</returns>
    public static bool ContainsFromPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FromPrincipal");
    }
    /// <summary>
    /// Gets the value of the ToPrincipal input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ToPrincipal input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetToPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["ToPrincipal"];
    }

    /// <summary>
    /// Gets a value indicating whether the ToPrincipal parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ToPrincipal parameter exists in the input paramater collection</returns>
    public static bool ContainsToPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ToPrincipal");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ReassignObjectsSystemUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReassignPrincipal input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReassignPrincipal input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetReassignPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["ReassignPrincipal"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReassignPrincipal parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReassignPrincipal parameter exists in the input paramater collection</returns>
    public static bool ContainsReassignPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReassignPrincipal");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Recalculate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RegisterSolution
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the PluginAssembly input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PluginAssembly input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetPluginAssembly(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["PluginAssembly"];
    }

    /// <summary>
    /// Gets a value indicating whether the PluginAssembly parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PluginAssembly parameter exists in the input paramater collection</returns>
    public static bool ContainsPluginAssembly(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PluginAssembly");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the PluginAssemblyId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PluginAssemblyId output parameter</returns>
    public static System.Guid GetPluginAssemblyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["PluginAssemblyId"];
    }

    /// <summary>
    /// Gets a value indicating whether the PluginAssemblyId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PluginAssemblyId parameter exists in the output paramater collection</returns>
    public static bool ContainsPluginAssemblyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("PluginAssemblyId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveClientFromSubscriptionSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ClientId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientId input parameter</returns>
    public static System.Guid GetClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ClientId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientId parameter exists in the input paramater collection</returns>
    public static bool ContainsClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveItemCampaign
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignId input parameter</returns>
    public static System.Guid GetCampaignId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignId");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveItemCampaignActivity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }
    /// <summary>
    /// Gets the value of the ItemId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ItemId input parameter</returns>
    public static System.Guid GetItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ItemId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ItemId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ItemId parameter exists in the input paramater collection</returns>
    public static bool ContainsItemId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ItemId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveMemberList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }
    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveMembersByFetchXmlList
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXml input parameter</returns>
    public static System.String GetFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FetchXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXml parameter exists in the input paramater collection</returns>
    public static bool ContainsFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FetchXml");
    }
    /// <summary>
    /// Gets the value of the KeepReturned input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the KeepReturned input parameter</returns>
    public static System.Boolean GetKeepReturned(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["KeepReturned"];
    }

    /// <summary>
    /// Gets a value indicating whether the KeepReturned parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the KeepReturned parameter exists in the input paramater collection</returns>
    public static bool ContainsKeepReturned(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("KeepReturned");
    }
    /// <summary>
    /// Gets the value of the ListId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ListId input parameter</returns>
    public static System.Guid GetListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ListId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ListId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ListId parameter exists in the input paramater collection</returns>
    public static bool ContainsListId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ListId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveMembersTeam
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MemberIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MemberIds input parameter</returns>
    public static System.Guid[] GetMemberIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["MemberIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the MemberIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MemberIds parameter exists in the input paramater collection</returns>
    public static bool ContainsMemberIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MemberIds");
    }
    /// <summary>
    /// Gets the value of the TeamId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TeamId input parameter</returns>
    public static System.Guid GetTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TeamId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TeamId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TeamId parameter exists in the input paramater collection</returns>
    public static bool ContainsTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TeamId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveParent
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemovePrivilegeRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the PrivilegeId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PrivilegeId input parameter</returns>
    public static System.Guid GetPrivilegeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["PrivilegeId"];
    }

    /// <summary>
    /// Gets a value indicating whether the PrivilegeId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PrivilegeId parameter exists in the input paramater collection</returns>
    public static bool ContainsPrivilegeId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PrivilegeId");
    }
    /// <summary>
    /// Gets the value of the RoleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleId input parameter</returns>
    public static System.Guid GetRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RoleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleId parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleId");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveProductFromKit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the KitId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the KitId input parameter</returns>
    public static System.Guid GetKitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["KitId"];
    }

    /// <summary>
    /// Gets a value indicating whether the KitId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the KitId parameter exists in the input paramater collection</returns>
    public static bool ContainsKitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("KitId");
    }
    /// <summary>
    /// Gets the value of the ProductId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProductId input parameter</returns>
    public static System.Guid GetProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ProductId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProductId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProductId parameter exists in the input paramater collection</returns>
    public static bool ContainsProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProductId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveRelated
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference[] GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference[])context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveSolutionComponent
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ComponentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentId input parameter</returns>
    public static System.Guid GetComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ComponentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentId parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentId");
    }
    /// <summary>
    /// Gets the value of the ComponentType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentType input parameter</returns>
    public static System.Int32 GetComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ComponentType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentType parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentType");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveSubstituteProduct
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ProductId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProductId input parameter</returns>
    public static System.Guid GetProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ProductId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProductId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProductId parameter exists in the input paramater collection</returns>
    public static bool ContainsProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProductId");
    }
    /// <summary>
    /// Gets the value of the SubstituteId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubstituteId input parameter</returns>
    public static System.Guid GetSubstituteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubstituteId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubstituteId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubstituteId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubstituteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubstituteId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RemoveUserRolesRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RoleIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleIds input parameter</returns>
    public static System.Guid[] GetRoleIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["RoleIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleIds parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleIds");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RenewContract
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ContractId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ContractId input parameter</returns>
    public static System.Guid GetContractId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ContractId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ContractId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ContractId parameter exists in the input paramater collection</returns>
    public static bool ContainsContractId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ContractId");
    }
    /// <summary>
    /// Gets the value of the IncludeCanceledLines input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IncludeCanceledLines input parameter</returns>
    public static System.Boolean GetIncludeCanceledLines(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IncludeCanceledLines"];
    }

    /// <summary>
    /// Gets a value indicating whether the IncludeCanceledLines parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IncludeCanceledLines parameter exists in the input paramater collection</returns>
    public static bool ContainsIncludeCanceledLines(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IncludeCanceledLines");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static System.Int32 GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ReplacePrivilegesRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RoleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleId input parameter</returns>
    public static System.Guid GetRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RoleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleId parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleId");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Reschedule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ResetSyncStateSubscription
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SubscriptionId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubscriptionId input parameter</returns>
    public static System.Guid GetSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubscriptionId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubscriptionId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubscriptionId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubscriptionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubscriptionId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ResetUserFilters
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the QueryType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueryType input parameter</returns>
    public static System.Int32 GetQueryType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["QueryType"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueryType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueryType parameter exists in the input paramater collection</returns>
    public static bool ContainsQueryType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueryType");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ResolveEmailAddress
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmailAddresses input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmailAddresses input parameter</returns>
    public static System.String GetEmailAddresses(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EmailAddresses"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmailAddresses parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmailAddresses parameter exists in the input paramater collection</returns>
    public static bool ContainsEmailAddresses(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EmailAddresses");
    }
    /// <summary>
    /// Gets the value of the ObjectTypeCodes input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ObjectTypeCodes input parameter</returns>
    public static System.Int32[] GetObjectTypeCodes(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.InputParameters["ObjectTypeCodes"];
    }

    /// <summary>
    /// Gets a value indicating whether the ObjectTypeCodes parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ObjectTypeCodes parameter exists in the input paramater collection</returns>
    public static bool ContainsObjectTypeCodes(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ObjectTypeCodes");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entities output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entities output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["Entities"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entities parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entities parameter exists in the output paramater collection</returns>
    public static bool ContainsEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Entities");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Retrieve
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the RelatedEntitiesQuery input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RelatedEntitiesQuery input parameter</returns>
    public static Microsoft.Xrm.Sdk.RelationshipQueryCollection GetRelatedEntitiesQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.RelationshipQueryCollection)context.InputParameters["RelatedEntitiesQuery"];
    }

    /// <summary>
    /// Gets a value indicating whether the RelatedEntitiesQuery parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RelatedEntitiesQuery parameter exists in the input paramater collection</returns>
    public static bool ContainsRelatedEntitiesQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RelatedEntitiesQuery");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAbsoluteAndSiteCollectionUrl
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AbsoluteUrl output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AbsoluteUrl output parameter</returns>
    public static System.String GetAbsoluteUrl(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["AbsoluteUrl"];
    }

    /// <summary>
    /// Gets a value indicating whether the AbsoluteUrl parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AbsoluteUrl parameter exists in the output paramater collection</returns>
    public static bool ContainsAbsoluteUrl(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AbsoluteUrl");
    }
    /// <summary>
    /// Gets the value of the SiteCollectionUrl output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SiteCollectionUrl output parameter</returns>
    public static System.String GetSiteCollectionUrl(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["SiteCollectionUrl"];
    }

    /// <summary>
    /// Gets a value indicating whether the SiteCollectionUrl parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SiteCollectionUrl parameter exists in the output paramater collection</returns>
    public static bool ContainsSiteCollectionUrl(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SiteCollectionUrl");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAllChildUsersSystemUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAllEntities
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityFilters input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityFilters input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityFilters GetEntityFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityFilters)context.InputParameters["EntityFilters"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityFilters parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityFilters parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityFilters");
    }
    /// <summary>
    /// Gets the value of the RetrieveAsIfPublished input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveAsIfPublished input parameter</returns>
    public static System.Boolean GetRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["RetrieveAsIfPublished"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection</returns>
    public static bool ContainsRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RetrieveAsIfPublished");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityMetadata[] GetEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityMetadata[])context.OutputParameters["EntityMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityMetadata");
    }
    /// <summary>
    /// Gets the value of the Timestamp output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Timestamp output parameter</returns>
    public static System.String GetTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Timestamp"];
    }

    /// <summary>
    /// Gets a value indicating whether the Timestamp parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Timestamp parameter exists in the output paramater collection</returns>
    public static bool ContainsTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Timestamp");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAllOptionSets
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RetrieveAsIfPublished input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveAsIfPublished input parameter</returns>
    public static System.Boolean GetRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["RetrieveAsIfPublished"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection</returns>
    public static bool ContainsRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RetrieveAsIfPublished");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OptionSetMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase[] GetOptionSetMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase[])context.OutputParameters["OptionSetMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsOptionSetMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("OptionSetMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAttribute
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnNumber input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnNumber input parameter</returns>
    public static System.Int32 GetColumnNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ColumnNumber"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnNumber parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnNumber parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnNumber");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the LogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LogicalName input parameter</returns>
    public static System.String GetLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["LogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the LogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LogicalName");
    }
    /// <summary>
    /// Gets the value of the MetadataId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MetadataId input parameter</returns>
    public static System.Guid GetMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["MetadataId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MetadataId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MetadataId parameter exists in the input paramater collection</returns>
    public static bool ContainsMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MetadataId");
    }
    /// <summary>
    /// Gets the value of the RetrieveAsIfPublished input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveAsIfPublished input parameter</returns>
    public static System.Boolean GetRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["RetrieveAsIfPublished"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection</returns>
    public static bool ContainsRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RetrieveAsIfPublished");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.AttributeMetadata GetAttributeMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.AttributeMetadata)context.OutputParameters["AttributeMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsAttributeMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AttributeMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAttributeChangeHistory
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeLogicalName input parameter</returns>
    public static System.String GetAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeLogicalName");
    }
    /// <summary>
    /// Gets the value of the PagingInfo input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PagingInfo input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.PagingInfo GetPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.PagingInfo)context.InputParameters["PagingInfo"];
    }

    /// <summary>
    /// Gets a value indicating whether the PagingInfo parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PagingInfo parameter exists in the input paramater collection</returns>
    public static bool ContainsPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PagingInfo");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAuditDetails
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AuditId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AuditId input parameter</returns>
    public static System.Guid GetAuditId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["AuditId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AuditId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AuditId parameter exists in the input paramater collection</returns>
    public static bool ContainsAuditId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AuditId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveBusinessHierarchyBusinessUnit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveByGroupResource
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the ResourceGroupId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ResourceGroupId input parameter</returns>
    public static System.Guid GetResourceGroupId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ResourceGroupId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ResourceGroupId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ResourceGroupId parameter exists in the input paramater collection</returns>
    public static bool ContainsResourceGroupId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ResourceGroupId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveByResourceResourceGroup
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the ResourceId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ResourceId input parameter</returns>
    public static System.Guid GetResourceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ResourceId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ResourceId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ResourceId parameter exists in the input paramater collection</returns>
    public static bool ContainsResourceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ResourceId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveByResourcesService
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the ResourceIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ResourceIds input parameter</returns>
    public static System.Guid[] GetResourceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["ResourceIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the ResourceIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ResourceIds parameter exists in the input paramater collection</returns>
    public static bool ContainsResourceIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ResourceIds");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveByTopIncidentProductKbArticle
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ProductId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProductId input parameter</returns>
    public static System.Guid GetProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ProductId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProductId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProductId parameter exists in the input paramater collection</returns>
    public static bool ContainsProductId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProductId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveByTopIncidentSubjectKbArticle
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SubjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubjectId input parameter</returns>
    public static System.Guid GetSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubjectId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveClientSubscriptionSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ClientId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientId input parameter</returns>
    public static System.Guid GetClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ClientId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientId parameter exists in the input paramater collection</returns>
    public static bool ContainsClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientId");
    }
    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveCustomersNotPlacedOrders
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveDependenciesForDelete
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ComponentType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentType input parameter</returns>
    public static System.Int32 GetComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ComponentType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentType parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentType");
    }
    /// <summary>
    /// Gets the value of the ObjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ObjectId input parameter</returns>
    public static System.Guid GetObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ObjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ObjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ObjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ObjectId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveDependenciesForUninstall
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveDependentComponents
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ComponentType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentType input parameter</returns>
    public static System.Int32 GetComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ComponentType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentType parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentType");
    }
    /// <summary>
    /// Gets the value of the ObjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ObjectId input parameter</returns>
    public static System.Guid GetObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ObjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ObjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ObjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ObjectId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveDuplicates
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the input paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BusinessEntity");
    }
    /// <summary>
    /// Gets the value of the MatchingEntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MatchingEntityName input parameter</returns>
    public static System.String GetMatchingEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MatchingEntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the MatchingEntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MatchingEntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsMatchingEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MatchingEntityName");
    }
    /// <summary>
    /// Gets the value of the PagingInfo input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PagingInfo input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.PagingInfo GetPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.PagingInfo)context.InputParameters["PagingInfo"];
    }

    /// <summary>
    /// Gets a value indicating whether the PagingInfo parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PagingInfo parameter exists in the input paramater collection</returns>
    public static bool ContainsPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PagingInfo");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DuplicateCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DuplicateCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetDuplicateCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["DuplicateCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the DuplicateCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DuplicateCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsDuplicateCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("DuplicateCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveEntitiesForAggregateQuery
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OuterQuery input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OuterQuery input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetOuterQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["OuterQuery"];
    }

    /// <summary>
    /// Gets a value indicating whether the OuterQuery parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OuterQuery parameter exists in the input paramater collection</returns>
    public static bool ContainsOuterQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OuterQuery");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["EntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveEntitiesToFilter
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveEntitiesToMailMerge
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CampaignActivityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CampaignActivityId input parameter</returns>
    public static System.Guid GetCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["CampaignActivityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the CampaignActivityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CampaignActivityId parameter exists in the input paramater collection</returns>
    public static bool ContainsCampaignActivityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CampaignActivityId");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }
    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveEntity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityFilters input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityFilters input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityFilters GetEntityFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityFilters)context.InputParameters["EntityFilters"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityFilters parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityFilters parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityFilters");
    }
    /// <summary>
    /// Gets the value of the LogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LogicalName input parameter</returns>
    public static System.String GetLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["LogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the LogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LogicalName");
    }
    /// <summary>
    /// Gets the value of the MetadataId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MetadataId input parameter</returns>
    public static System.Guid GetMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["MetadataId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MetadataId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MetadataId parameter exists in the input paramater collection</returns>
    public static bool ContainsMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MetadataId");
    }
    /// <summary>
    /// Gets the value of the RetrieveAsIfPublished input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveAsIfPublished input parameter</returns>
    public static System.Boolean GetRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["RetrieveAsIfPublished"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection</returns>
    public static bool ContainsRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RetrieveAsIfPublished");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityMetadata GetEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityMetadata)context.OutputParameters["EntityMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveEntityFromCache
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityFilters input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityFilters input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityFilters GetEntityFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityFilters)context.InputParameters["EntityFilters"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityFilters parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityFilters parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityFilters");
    }
    /// <summary>
    /// Gets the value of the LogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LogicalName input parameter</returns>
    public static System.String GetLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["LogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the LogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LogicalName");
    }
    /// <summary>
    /// Gets the value of the MetadataId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MetadataId input parameter</returns>
    public static System.Guid GetMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["MetadataId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MetadataId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MetadataId parameter exists in the input paramater collection</returns>
    public static bool ContainsMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MetadataId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityMetadata GetEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityMetadata)context.OutputParameters["EntityMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveEntityRibbon
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CompressedEntityXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CompressedEntityXml output parameter</returns>
    public static System.Byte[] GetCompressedEntityXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["CompressedEntityXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CompressedEntityXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CompressedEntityXml parameter exists in the output paramater collection</returns>
    public static bool ContainsCompressedEntityXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CompressedEntityXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveEntityXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityXml output parameter</returns>
    public static System.String GetEntityXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["EntityXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityXml parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveExchangeRate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TransactionCurrencyId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TransactionCurrencyId input parameter</returns>
    public static System.Guid GetTransactionCurrencyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TransactionCurrencyId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TransactionCurrencyId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TransactionCurrencyId parameter exists in the input paramater collection</returns>
    public static bool ContainsTransactionCurrencyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TransactionCurrencyId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExchangeRate output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExchangeRate output parameter</returns>
    public static System.Decimal GetExchangeRate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Decimal)context.OutputParameters["ExchangeRate"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExchangeRate parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExchangeRate parameter exists in the output paramater collection</returns>
    public static bool ContainsExchangeRate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExchangeRate");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveExternalRoots
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ComponentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentId input parameter</returns>
    public static System.Guid GetComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ComponentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentId parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentId");
    }
    /// <summary>
    /// Gets the value of the ComponentType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentType input parameter</returns>
    public static System.Int32 GetComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ComponentType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentType parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentType");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveFilteredForms
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the FormType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FormType input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetFormType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["FormType"];
    }

    /// <summary>
    /// Gets a value indicating whether the FormType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FormType parameter exists in the input paramater collection</returns>
    public static bool ContainsFormType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FormType");
    }
    /// <summary>
    /// Gets the value of the SystemUserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SystemUserId input parameter</returns>
    public static System.Guid GetSystemUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SystemUserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SystemUserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SystemUserId parameter exists in the input paramater collection</returns>
    public static bool ContainsSystemUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SystemUserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SystemForms output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SystemForms output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReferenceCollection GetSystemForms(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReferenceCollection)context.OutputParameters["SystemForms"];
    }

    /// <summary>
    /// Gets a value indicating whether the SystemForms parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SystemForms parameter exists in the output paramater collection</returns>
    public static bool ContainsSystemForms(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SystemForms");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveFormattedImportJobResults
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FormattedResults output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FormattedResults output parameter</returns>
    public static System.String GetFormattedResults(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["FormattedResults"];
    }

    /// <summary>
    /// Gets a value indicating whether the FormattedResults parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FormattedResults parameter exists in the output paramater collection</returns>
    public static bool ContainsFormattedResults(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("FormattedResults");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveFormXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ComponentState output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentState output parameter</returns>
    public static System.Int32 GetComponentState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["ComponentState"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentState parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentState parameter exists in the output paramater collection</returns>
    public static bool ContainsComponentState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ComponentState");
    }
    /// <summary>
    /// Gets the value of the CustomizationLevel output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationLevel output parameter</returns>
    public static System.Int32 GetCustomizationLevel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["CustomizationLevel"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationLevel parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationLevel parameter exists in the output paramater collection</returns>
    public static bool ContainsCustomizationLevel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CustomizationLevel");
    }
    /// <summary>
    /// Gets the value of the FormXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FormXml output parameter</returns>
    public static System.String GetFormXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["FormXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FormXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FormXml parameter exists in the output paramater collection</returns>
    public static bool ContainsFormXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("FormXml");
    }
    /// <summary>
    /// Gets the value of the SolutionId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionId output parameter</returns>
    public static System.Guid GetSolutionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["SolutionId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionId parameter exists in the output paramater collection</returns>
    public static bool ContainsSolutionId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SolutionId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveImportJobProgress
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportJobId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportJobId input parameter</returns>
    public static System.Guid GetImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportJobId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportJobId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportJobId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportJobId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportJobId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Progress output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Progress output parameter</returns>
    public static System.String GetProgress(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Progress"];
    }

    /// <summary>
    /// Gets a value indicating whether the Progress parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Progress parameter exists in the output paramater collection</returns>
    public static bool ContainsProgress(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Progress");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveInstalledLanguagePackVersion
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Language input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Language input parameter</returns>
    public static System.Int32 GetLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Language"];
    }

    /// <summary>
    /// Gets a value indicating whether the Language parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Language parameter exists in the input paramater collection</returns>
    public static bool ContainsLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Language");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Version output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Version output parameter</returns>
    public static System.String GetVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Version"];
    }

    /// <summary>
    /// Gets a value indicating whether the Version parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Version parameter exists in the output paramater collection</returns>
    public static bool ContainsVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Version");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveLicenseInfo
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AccessMode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AccessMode input parameter</returns>
    public static System.Int32 GetAccessMode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["AccessMode"];
    }

    /// <summary>
    /// Gets a value indicating whether the AccessMode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AccessMode parameter exists in the input paramater collection</returns>
    public static bool ContainsAccessMode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AccessMode");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AvailableCount output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AvailableCount output parameter</returns>
    public static System.Int32 GetAvailableCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["AvailableCount"];
    }

    /// <summary>
    /// Gets a value indicating whether the AvailableCount parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AvailableCount parameter exists in the output paramater collection</returns>
    public static bool ContainsAvailableCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AvailableCount");
    }
    /// <summary>
    /// Gets the value of the GrantedLicenseCount output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the GrantedLicenseCount output parameter</returns>
    public static System.Int32 GetGrantedLicenseCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["GrantedLicenseCount"];
    }

    /// <summary>
    /// Gets a value indicating whether the GrantedLicenseCount parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the GrantedLicenseCount parameter exists in the output paramater collection</returns>
    public static bool ContainsGrantedLicenseCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("GrantedLicenseCount");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveLocLabels
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeName input parameter</returns>
    public static System.String GetAttributeName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeName");
    }
    /// <summary>
    /// Gets the value of the EntityMoniker input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMoniker input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["EntityMoniker"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMoniker parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMoniker parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityMoniker");
    }
    /// <summary>
    /// Gets the value of the IncludeUnpublished input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IncludeUnpublished input parameter</returns>
    public static System.Boolean GetIncludeUnpublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IncludeUnpublished"];
    }

    /// <summary>
    /// Gets a value indicating whether the IncludeUnpublished parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IncludeUnpublished parameter exists in the input paramater collection</returns>
    public static bool ContainsIncludeUnpublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IncludeUnpublished");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Label output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Label output parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.OutputParameters["Label"];
    }

    /// <summary>
    /// Gets a value indicating whether the Label parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Label parameter exists in the output paramater collection</returns>
    public static bool ContainsLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Label");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveManagedProperty
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LogicalName input parameter</returns>
    public static System.String GetLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["LogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the LogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LogicalName");
    }
    /// <summary>
    /// Gets the value of the MetadataId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MetadataId input parameter</returns>
    public static System.Guid GetMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["MetadataId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MetadataId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MetadataId parameter exists in the input paramater collection</returns>
    public static bool ContainsMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MetadataId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ManagedPropertyMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ManagedPropertyMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.ManagedPropertyMetadata GetManagedPropertyMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.ManagedPropertyMetadata)context.OutputParameters["ManagedPropertyMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the ManagedPropertyMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ManagedPropertyMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsManagedPropertyMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ManagedPropertyMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMembersBulkOperation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId input parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationId");
    }
    /// <summary>
    /// Gets the value of the BulkOperationSource input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationSource input parameter</returns>
    public static System.Int32 GetBulkOperationSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["BulkOperationSource"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationSource parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationSource parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationSource");
    }
    /// <summary>
    /// Gets the value of the EntitySource input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntitySource input parameter</returns>
    public static System.Int32 GetEntitySource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["EntitySource"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntitySource parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntitySource parameter exists in the input paramater collection</returns>
    public static bool ContainsEntitySource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntitySource");
    }
    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMembersTeam
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }
    /// <summary>
    /// Gets the value of the MemberColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MemberColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetMemberColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["MemberColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the MemberColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MemberColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsMemberColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MemberColumnSet");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMetadataChanges
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ClientVersionStamp input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientVersionStamp input parameter</returns>
    public static System.String GetClientVersionStamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ClientVersionStamp"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientVersionStamp parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientVersionStamp parameter exists in the input paramater collection</returns>
    public static bool ContainsClientVersionStamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientVersionStamp");
    }
    /// <summary>
    /// Gets the value of the DeletedMetadataFilters input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DeletedMetadataFilters input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.Query.DeletedMetadataFilters GetDeletedMetadataFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.Query.DeletedMetadataFilters)context.InputParameters["DeletedMetadataFilters"];
    }

    /// <summary>
    /// Gets a value indicating whether the DeletedMetadataFilters parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DeletedMetadataFilters parameter exists in the input paramater collection</returns>
    public static bool ContainsDeletedMetadataFilters(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DeletedMetadataFilters");
    }
    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.Query.EntityQueryExpression GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.Query.EntityQueryExpression)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DeletedMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DeletedMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.Query.DeletedMetadataCollection GetDeletedMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.Query.DeletedMetadataCollection)context.OutputParameters["DeletedMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the DeletedMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DeletedMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsDeletedMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("DeletedMetadata");
    }
    /// <summary>
    /// Gets the value of the EntityMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityMetadataCollection GetEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityMetadataCollection)context.OutputParameters["EntityMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityMetadata");
    }
    /// <summary>
    /// Gets the value of the ServerVersionStamp output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ServerVersionStamp output parameter</returns>
    public static System.String GetServerVersionStamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["ServerVersionStamp"];
    }

    /// <summary>
    /// Gets a value indicating whether the ServerVersionStamp parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ServerVersionStamp parameter exists in the output paramater collection</returns>
    public static bool ContainsServerVersionStamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ServerVersionStamp");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMetadataChangesForRichClient
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LastSyncTime input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LastSyncTime input parameter</returns>
    public static System.DateTime GetLastSyncTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["LastSyncTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the LastSyncTime parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LastSyncTime parameter exists in the input paramater collection</returns>
    public static bool ContainsLastSyncTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LastSyncTime");
    }
    /// <summary>
    /// Gets the value of the LastTimestamp input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LastTimestamp input parameter</returns>
    public static System.Int64 GetLastTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int64)context.InputParameters["LastTimestamp"];
    }

    /// <summary>
    /// Gets a value indicating whether the LastTimestamp parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LastTimestamp parameter exists in the input paramater collection</returns>
    public static bool ContainsLastTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LastTimestamp");
    }
    /// <summary>
    /// Gets the value of the LastUserLanguage input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LastUserLanguage input parameter</returns>
    public static System.Int32 GetLastUserLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["LastUserLanguage"];
    }

    /// <summary>
    /// Gets a value indicating whether the LastUserLanguage parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LastUserLanguage parameter exists in the input paramater collection</returns>
    public static bool ContainsLastUserLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LastUserLanguage");
    }
    /// <summary>
    /// Gets the value of the MetadataVersion input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MetadataVersion input parameter</returns>
    public static System.String GetMetadataVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["MetadataVersion"];
    }

    /// <summary>
    /// Gets a value indicating whether the MetadataVersion parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MetadataVersion parameter exists in the input paramater collection</returns>
    public static bool ContainsMetadataVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MetadataVersion");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AddedOrUpdatedLocalizedLabelMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AddedOrUpdatedLocalizedLabelMetadata output parameter</returns>
    public static System.Byte[] GetAddedOrUpdatedLocalizedLabelMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["AddedOrUpdatedLocalizedLabelMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the AddedOrUpdatedLocalizedLabelMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AddedOrUpdatedLocalizedLabelMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsAddedOrUpdatedLocalizedLabelMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AddedOrUpdatedLocalizedLabelMetadata");
    }
    /// <summary>
    /// Gets the value of the AddedOrUpdatedOtherMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AddedOrUpdatedOtherMetadata output parameter</returns>
    public static System.Byte[] GetAddedOrUpdatedOtherMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["AddedOrUpdatedOtherMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the AddedOrUpdatedOtherMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AddedOrUpdatedOtherMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsAddedOrUpdatedOtherMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AddedOrUpdatedOtherMetadata");
    }
    /// <summary>
    /// Gets the value of the DeletedMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DeletedMetadata output parameter</returns>
    public static System.Byte[] GetDeletedMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["DeletedMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the DeletedMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DeletedMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsDeletedMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("DeletedMetadata");
    }
    /// <summary>
    /// Gets the value of the NewCalculatedTimestamp output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewCalculatedTimestamp output parameter</returns>
    public static System.String GetNewCalculatedTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["NewCalculatedTimestamp"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewCalculatedTimestamp parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewCalculatedTimestamp parameter exists in the output paramater collection</returns>
    public static bool ContainsNewCalculatedTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("NewCalculatedTimestamp");
    }
    /// <summary>
    /// Gets the value of the NewSyncTime output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewSyncTime output parameter</returns>
    public static System.DateTime GetNewSyncTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.OutputParameters["NewSyncTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewSyncTime parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewSyncTime parameter exists in the output paramater collection</returns>
    public static bool ContainsNewSyncTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("NewSyncTime");
    }
    /// <summary>
    /// Gets the value of the NewTimestamp output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewTimestamp output parameter</returns>
    public static System.Int64 GetNewTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int64)context.OutputParameters["NewTimestamp"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewTimestamp parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewTimestamp parameter exists in the output paramater collection</returns>
    public static bool ContainsNewTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("NewTimestamp");
    }
    /// <summary>
    /// Gets the value of the NewUserLanguage output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewUserLanguage output parameter</returns>
    public static System.Int32 GetNewUserLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["NewUserLanguage"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewUserLanguage parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewUserLanguage parameter exists in the output paramater collection</returns>
    public static bool ContainsNewUserLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("NewUserLanguage");
    }
    /// <summary>
    /// Gets the value of the SyncType output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SyncType output parameter</returns>
    public static System.Byte GetSyncType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte)context.OutputParameters["SyncType"];
    }

    /// <summary>
    /// Gets a value indicating whether the SyncType parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SyncType parameter exists in the output paramater collection</returns>
    public static bool ContainsSyncType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("SyncType");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMissingComponents
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CustomizationFile input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CustomizationFile input parameter</returns>
    public static System.Byte[] GetCustomizationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.InputParameters["CustomizationFile"];
    }

    /// <summary>
    /// Gets a value indicating whether the CustomizationFile parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CustomizationFile parameter exists in the input paramater collection</returns>
    public static bool ContainsCustomizationFile(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CustomizationFile");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMissingDependencies
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMultiple
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveOptionalFeatureStatus
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Name input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Name input parameter</returns>
    public static System.String GetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Name"];
    }

    /// <summary>
    /// Gets a value indicating whether the Name parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Name parameter exists in the input paramater collection</returns>
    public static bool ContainsName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Name");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the InstallationStatus output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the InstallationStatus output parameter</returns>
    public static System.Int32 GetInstallationStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["InstallationStatus"];
    }

    /// <summary>
    /// Gets a value indicating whether the InstallationStatus parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the InstallationStatus parameter exists in the output paramater collection</returns>
    public static bool ContainsInstallationStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("InstallationStatus");
    }
    /// <summary>
    /// Gets the value of the IsEnabled output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsEnabled output parameter</returns>
    public static System.Boolean GetIsEnabled(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsEnabled"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsEnabled parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsEnabled parameter exists in the output paramater collection</returns>
    public static bool ContainsIsEnabled(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsEnabled");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveOptionSet
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MetadataId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MetadataId input parameter</returns>
    public static System.Guid GetMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["MetadataId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MetadataId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MetadataId parameter exists in the input paramater collection</returns>
    public static bool ContainsMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MetadataId");
    }
    /// <summary>
    /// Gets the value of the Name input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Name input parameter</returns>
    public static System.String GetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Name"];
    }

    /// <summary>
    /// Gets a value indicating whether the Name parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Name parameter exists in the input paramater collection</returns>
    public static bool ContainsName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Name");
    }
    /// <summary>
    /// Gets the value of the RetrieveAsIfPublished input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveAsIfPublished input parameter</returns>
    public static System.Boolean GetRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["RetrieveAsIfPublished"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection</returns>
    public static bool ContainsRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RetrieveAsIfPublished");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OptionSetMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase GetOptionSetMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase)context.OutputParameters["OptionSetMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsOptionSetMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("OptionSetMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveParentGroupsResourceGroup
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the ResourceGroupId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ResourceGroupId input parameter</returns>
    public static System.Guid GetResourceGroupId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ResourceGroupId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ResourceGroupId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ResourceGroupId parameter exists in the input paramater collection</returns>
    public static bool ContainsResourceGroupId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ResourceGroupId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveParsedDataImportFile
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportFileId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportFileId input parameter</returns>
    public static System.Guid GetImportFileId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportFileId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportFileId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportFileId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportFileId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportFileId");
    }
    /// <summary>
    /// Gets the value of the PagingInfo input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PagingInfo input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.PagingInfo GetPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.PagingInfo)context.InputParameters["PagingInfo"];
    }

    /// <summary>
    /// Gets a value indicating whether the PagingInfo parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PagingInfo parameter exists in the input paramater collection</returns>
    public static bool ContainsPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PagingInfo");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Values output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Values output parameter</returns>
    public static System.String[][] GetValues(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[][])context.OutputParameters["Values"];
    }

    /// <summary>
    /// Gets a value indicating whether the Values parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Values parameter exists in the output paramater collection</returns>
    public static bool ContainsValues(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Values");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrievePerformanceReport
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DumpStrategy input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DumpStrategy input parameter</returns>
    public static System.Int32 GetDumpStrategy(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["DumpStrategy"];
    }

    /// <summary>
    /// Gets a value indicating whether the DumpStrategy parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DumpStrategy parameter exists in the input paramater collection</returns>
    public static bool ContainsDumpStrategy(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DumpStrategy");
    }
    /// <summary>
    /// Gets the value of the FilterByOrganization input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FilterByOrganization input parameter</returns>
    public static System.Boolean GetFilterByOrganization(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["FilterByOrganization"];
    }

    /// <summary>
    /// Gets a value indicating whether the FilterByOrganization parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FilterByOrganization parameter exists in the input paramater collection</returns>
    public static bool ContainsFilterByOrganization(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FilterByOrganization");
    }
    /// <summary>
    /// Gets the value of the FilterByTestName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FilterByTestName input parameter</returns>
    public static System.String GetFilterByTestName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FilterByTestName"];
    }

    /// <summary>
    /// Gets a value indicating whether the FilterByTestName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FilterByTestName parameter exists in the input paramater collection</returns>
    public static bool ContainsFilterByTestName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FilterByTestName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportXml output parameter</returns>
    public static System.String GetReportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["ReportXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportXml parameter exists in the output paramater collection</returns>
    public static bool ContainsReportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ReportXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrievePersonalWall
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CommentsPerPost input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CommentsPerPost input parameter</returns>
    public static System.Int32 GetCommentsPerPost(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["CommentsPerPost"];
    }

    /// <summary>
    /// Gets a value indicating whether the CommentsPerPost parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CommentsPerPost parameter exists in the input paramater collection</returns>
    public static bool ContainsCommentsPerPost(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CommentsPerPost");
    }
    /// <summary>
    /// Gets the value of the EndDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EndDate input parameter</returns>
    public static System.DateTime GetEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["EndDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the EndDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EndDate parameter exists in the input paramater collection</returns>
    public static bool ContainsEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EndDate");
    }
    /// <summary>
    /// Gets the value of the PageNumber input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PageNumber input parameter</returns>
    public static System.Int32 GetPageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["PageNumber"];
    }

    /// <summary>
    /// Gets a value indicating whether the PageNumber parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PageNumber parameter exists in the input paramater collection</returns>
    public static bool ContainsPageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PageNumber");
    }
    /// <summary>
    /// Gets the value of the PageSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PageSize input parameter</returns>
    public static System.Int32 GetPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["PageSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the PageSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PageSize parameter exists in the input paramater collection</returns>
    public static bool ContainsPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PageSize");
    }
    /// <summary>
    /// Gets the value of the Source input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Source input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Source"];
    }

    /// <summary>
    /// Gets a value indicating whether the Source parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Source parameter exists in the input paramater collection</returns>
    public static bool ContainsSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Source");
    }
    /// <summary>
    /// Gets the value of the StartDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the StartDate input parameter</returns>
    public static System.DateTime GetStartDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["StartDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the StartDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the StartDate parameter exists in the input paramater collection</returns>
    public static bool ContainsStartDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("StartDate");
    }
    /// <summary>
    /// Gets the value of the Type input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Type input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Type"];
    }

    /// <summary>
    /// Gets a value indicating whether the Type parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Type parameter exists in the input paramater collection</returns>
    public static bool ContainsType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Type");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrievePrincipalAccess
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Principal input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Principal input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Principal"];
    }

    /// <summary>
    /// Gets a value indicating whether the Principal parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Principal parameter exists in the input paramater collection</returns>
    public static bool ContainsPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Principal");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrievePrincipalAttributePrivileges
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Principal input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Principal input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Principal"];
    }

    /// <summary>
    /// Gets a value indicating whether the Principal parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Principal parameter exists in the input paramater collection</returns>
    public static bool ContainsPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Principal");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributePrivileges output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributePrivileges output parameter</returns>
    public static Microsoft.Xrm.Sdk.AttributePrivilegeCollection GetAttributePrivileges(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.AttributePrivilegeCollection)context.OutputParameters["AttributePrivileges"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributePrivileges parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributePrivileges parameter exists in the output paramater collection</returns>
    public static bool ContainsAttributePrivileges(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AttributePrivileges");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveProvisionedLanguagePackVersion
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Language input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Language input parameter</returns>
    public static System.Int32 GetLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Language"];
    }

    /// <summary>
    /// Gets a value indicating whether the Language parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Language parameter exists in the input paramater collection</returns>
    public static bool ContainsLanguage(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Language");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Version output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Version output parameter</returns>
    public static System.String GetVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Version"];
    }

    /// <summary>
    /// Gets a value indicating whether the Version parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Version parameter exists in the output paramater collection</returns>
    public static bool ContainsVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Version");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveRecordChangeHistory
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the PagingInfo input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PagingInfo input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.PagingInfo GetPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.PagingInfo)context.InputParameters["PagingInfo"];
    }

    /// <summary>
    /// Gets a value indicating whether the PagingInfo parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PagingInfo parameter exists in the input paramater collection</returns>
    public static bool ContainsPagingInfo(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PagingInfo");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveRecordWall
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CommentsPerPost input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CommentsPerPost input parameter</returns>
    public static System.Int32 GetCommentsPerPost(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["CommentsPerPost"];
    }

    /// <summary>
    /// Gets a value indicating whether the CommentsPerPost parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CommentsPerPost parameter exists in the input paramater collection</returns>
    public static bool ContainsCommentsPerPost(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CommentsPerPost");
    }
    /// <summary>
    /// Gets the value of the EndDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EndDate input parameter</returns>
    public static System.DateTime GetEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["EndDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the EndDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EndDate parameter exists in the input paramater collection</returns>
    public static bool ContainsEndDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EndDate");
    }
    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }
    /// <summary>
    /// Gets the value of the PageNumber input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PageNumber input parameter</returns>
    public static System.Int32 GetPageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["PageNumber"];
    }

    /// <summary>
    /// Gets a value indicating whether the PageNumber parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PageNumber parameter exists in the input paramater collection</returns>
    public static bool ContainsPageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PageNumber");
    }
    /// <summary>
    /// Gets the value of the PageSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PageSize input parameter</returns>
    public static System.Int32 GetPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["PageSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the PageSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PageSize parameter exists in the input paramater collection</returns>
    public static bool ContainsPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PageSize");
    }
    /// <summary>
    /// Gets the value of the Source input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Source input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Source"];
    }

    /// <summary>
    /// Gets a value indicating whether the Source parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Source parameter exists in the input paramater collection</returns>
    public static bool ContainsSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Source");
    }
    /// <summary>
    /// Gets the value of the StartDate input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the StartDate input parameter</returns>
    public static System.DateTime GetStartDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["StartDate"];
    }

    /// <summary>
    /// Gets a value indicating whether the StartDate parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the StartDate parameter exists in the input paramater collection</returns>
    public static bool ContainsStartDate(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("StartDate");
    }
    /// <summary>
    /// Gets the value of the Type input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Type input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Type"];
    }

    /// <summary>
    /// Gets a value indicating whether the Type parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Type parameter exists in the input paramater collection</returns>
    public static bool ContainsType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Type");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveRelationship
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MetadataId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MetadataId input parameter</returns>
    public static System.Guid GetMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["MetadataId"];
    }

    /// <summary>
    /// Gets a value indicating whether the MetadataId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MetadataId parameter exists in the input paramater collection</returns>
    public static bool ContainsMetadataId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MetadataId");
    }
    /// <summary>
    /// Gets the value of the Name input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Name input parameter</returns>
    public static System.String GetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Name"];
    }

    /// <summary>
    /// Gets a value indicating whether the Name parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Name parameter exists in the input paramater collection</returns>
    public static bool ContainsName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Name");
    }
    /// <summary>
    /// Gets the value of the RetrieveAsIfPublished input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveAsIfPublished input parameter</returns>
    public static System.Boolean GetRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["RetrieveAsIfPublished"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveAsIfPublished parameter exists in the input paramater collection</returns>
    public static bool ContainsRetrieveAsIfPublished(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RetrieveAsIfPublished");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RelationshipMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RelationshipMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.RelationshipMetadataBase GetRelationshipMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.RelationshipMetadataBase)context.OutputParameters["RelationshipMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the RelationshipMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RelationshipMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsRelationshipMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("RelationshipMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveReportSqlFromQuery
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXml input parameter</returns>
    public static System.String GetFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FetchXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXml parameter exists in the input paramater collection</returns>
    public static bool ContainsFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FetchXml");
    }
    /// <summary>
    /// Gets the value of the RetrieveAllColumns input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveAllColumns input parameter</returns>
    public static System.Boolean GetRetrieveAllColumns(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["RetrieveAllColumns"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveAllColumns parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveAllColumns parameter exists in the input paramater collection</returns>
    public static bool ContainsRetrieveAllColumns(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RetrieveAllColumns");
    }
    /// <summary>
    /// Gets the value of the UseStoredProcedures input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UseStoredProcedures input parameter</returns>
    public static System.Boolean GetUseStoredProcedures(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["UseStoredProcedures"];
    }

    /// <summary>
    /// Gets a value indicating whether the UseStoredProcedures parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UseStoredProcedures parameter exists in the input paramater collection</returns>
    public static bool ContainsUseStoredProcedures(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UseStoredProcedures");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ReportSql output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportSql output parameter</returns>
    public static System.String GetReportSql(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["ReportSql"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportSql parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportSql parameter exists in the output paramater collection</returns>
    public static bool ContainsReportSql(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ReportSql");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveRequiredComponents
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ComponentType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ComponentType input parameter</returns>
    public static System.Int32 GetComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["ComponentType"];
    }

    /// <summary>
    /// Gets a value indicating whether the ComponentType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ComponentType parameter exists in the input paramater collection</returns>
    public static bool ContainsComponentType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ComponentType");
    }
    /// <summary>
    /// Gets the value of the ObjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ObjectId input parameter</returns>
    public static System.Guid GetObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ObjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ObjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ObjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsObjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ObjectId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveRolePrivilegesRole
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RoleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RoleId input parameter</returns>
    public static System.Guid GetRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RoleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RoleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RoleId parameter exists in the input paramater collection</returns>
    public static bool ContainsRoleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RoleId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveSharedPrincipalsAndAccess
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveSubGroupsResourceGroup
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the ResourceGroupId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ResourceGroupId input parameter</returns>
    public static System.Guid GetResourceGroupId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ResourceGroupId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ResourceGroupId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ResourceGroupId parameter exists in the input paramater collection</returns>
    public static bool ContainsResourceGroupId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ResourceGroupId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveSubsidiaryTeamsBusinessUnit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveSubsidiaryUsersBusinessUnit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveTeamPrivileges
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TeamId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TeamId input parameter</returns>
    public static System.Guid GetTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TeamId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TeamId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TeamId parameter exists in the input paramater collection</returns>
    public static bool ContainsTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TeamId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveTeamsSystemUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveUnpublished
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveUnpublishedMultiple
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveUserPrivileges
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveUserSettingsSystemUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the EntityId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityId input parameter</returns>
    public static System.Guid GetEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EntityId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityId parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveWallByView
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CommentsPerPost input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CommentsPerPost input parameter</returns>
    public static System.Int32 GetCommentsPerPost(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["CommentsPerPost"];
    }

    /// <summary>
    /// Gets a value indicating whether the CommentsPerPost parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CommentsPerPost parameter exists in the input paramater collection</returns>
    public static bool ContainsCommentsPerPost(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CommentsPerPost");
    }
    /// <summary>
    /// Gets the value of the PageNumber input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PageNumber input parameter</returns>
    public static System.Int32 GetPageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["PageNumber"];
    }

    /// <summary>
    /// Gets a value indicating whether the PageNumber parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PageNumber parameter exists in the input paramater collection</returns>
    public static bool ContainsPageNumber(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PageNumber");
    }
    /// <summary>
    /// Gets the value of the PageSize input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PageSize input parameter</returns>
    public static System.Int32 GetPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["PageSize"];
    }

    /// <summary>
    /// Gets a value indicating whether the PageSize parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PageSize parameter exists in the input paramater collection</returns>
    public static bool ContainsPageSize(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PageSize");
    }
    /// <summary>
    /// Gets the value of the PagingCookie input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PagingCookie input parameter</returns>
    public static System.String GetPagingCookie(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["PagingCookie"];
    }

    /// <summary>
    /// Gets a value indicating whether the PagingCookie parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PagingCookie parameter exists in the input paramater collection</returns>
    public static bool ContainsPagingCookie(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PagingCookie");
    }
    /// <summary>
    /// Gets the value of the Source input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Source input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Source"];
    }

    /// <summary>
    /// Gets a value indicating whether the Source parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Source parameter exists in the input paramater collection</returns>
    public static bool ContainsSource(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Source");
    }
    /// <summary>
    /// Gets the value of the View input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the View input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetView(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["View"];
    }

    /// <summary>
    /// Gets a value indicating whether the View parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the View parameter exists in the input paramater collection</returns>
    public static bool ContainsView(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("View");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ReviseQuote
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ColumnSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ColumnSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.ColumnSet GetColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.ColumnSet)context.InputParameters["ColumnSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the ColumnSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ColumnSet parameter exists in the input paramater collection</returns>
    public static bool ContainsColumnSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ColumnSet");
    }
    /// <summary>
    /// Gets the value of the QuoteId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QuoteId input parameter</returns>
    public static System.Guid GetQuoteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["QuoteId"];
    }

    /// <summary>
    /// Gets a value indicating whether the QuoteId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QuoteId parameter exists in the input paramater collection</returns>
    public static bool ContainsQuoteId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QuoteId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RevokeAccess
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Revokee input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Revokee input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetRevokee(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Revokee"];
    }

    /// <summary>
    /// Gets a value indicating whether the Revokee parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Revokee parameter exists in the input paramater collection</returns>
    public static bool ContainsRevokee(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Revokee");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Rollup
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Route
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EndpointId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EndpointId input parameter</returns>
    public static System.Guid GetEndpointId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EndpointId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EndpointId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EndpointId parameter exists in the input paramater collection</returns>
    public static bool ContainsEndpointId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EndpointId");
    }
    /// <summary>
    /// Gets the value of the SourceQueueId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SourceQueueId input parameter</returns>
    public static System.Guid GetSourceQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SourceQueueId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SourceQueueId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SourceQueueId parameter exists in the input paramater collection</returns>
    public static bool ContainsSourceQueueId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SourceQueueId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SearchByBodyKbArticle
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the QueryExpression input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueryExpression input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["QueryExpression"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueryExpression parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueryExpression parameter exists in the input paramater collection</returns>
    public static bool ContainsQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueryExpression");
    }
    /// <summary>
    /// Gets the value of the SearchText input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SearchText input parameter</returns>
    public static System.String GetSearchText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SearchText"];
    }

    /// <summary>
    /// Gets a value indicating whether the SearchText parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SearchText parameter exists in the input paramater collection</returns>
    public static bool ContainsSearchText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SearchText");
    }
    /// <summary>
    /// Gets the value of the SubjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubjectId input parameter</returns>
    public static System.Guid GetSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubjectId");
    }
    /// <summary>
    /// Gets the value of the UseInflection input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UseInflection input parameter</returns>
    public static System.Boolean GetUseInflection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["UseInflection"];
    }

    /// <summary>
    /// Gets a value indicating whether the UseInflection parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UseInflection parameter exists in the input paramater collection</returns>
    public static bool ContainsUseInflection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UseInflection");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SearchByKeywordsKbArticle
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the QueryExpression input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueryExpression input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["QueryExpression"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueryExpression parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueryExpression parameter exists in the input paramater collection</returns>
    public static bool ContainsQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueryExpression");
    }
    /// <summary>
    /// Gets the value of the SearchText input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SearchText input parameter</returns>
    public static System.String GetSearchText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SearchText"];
    }

    /// <summary>
    /// Gets a value indicating whether the SearchText parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SearchText parameter exists in the input paramater collection</returns>
    public static bool ContainsSearchText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SearchText");
    }
    /// <summary>
    /// Gets the value of the SubjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubjectId input parameter</returns>
    public static System.Guid GetSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubjectId");
    }
    /// <summary>
    /// Gets the value of the UseInflection input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UseInflection input parameter</returns>
    public static System.Boolean GetUseInflection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["UseInflection"];
    }

    /// <summary>
    /// Gets a value indicating whether the UseInflection parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UseInflection parameter exists in the input paramater collection</returns>
    public static bool ContainsUseInflection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UseInflection");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SearchByTitleKbArticle
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the QueryExpression input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueryExpression input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["QueryExpression"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueryExpression parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueryExpression parameter exists in the input paramater collection</returns>
    public static bool ContainsQueryExpression(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueryExpression");
    }
    /// <summary>
    /// Gets the value of the SearchText input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SearchText input parameter</returns>
    public static System.String GetSearchText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SearchText"];
    }

    /// <summary>
    /// Gets a value indicating whether the SearchText parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SearchText parameter exists in the input paramater collection</returns>
    public static bool ContainsSearchText(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SearchText");
    }
    /// <summary>
    /// Gets the value of the SubjectId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SubjectId input parameter</returns>
    public static System.Guid GetSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SubjectId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SubjectId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SubjectId parameter exists in the input paramater collection</returns>
    public static bool ContainsSubjectId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SubjectId");
    }
    /// <summary>
    /// Gets the value of the UseInflection input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UseInflection input parameter</returns>
    public static System.Boolean GetUseInflection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["UseInflection"];
    }

    /// <summary>
    /// Gets a value indicating whether the UseInflection parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UseInflection parameter exists in the input paramater collection</returns>
    public static bool ContainsUseInflection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UseInflection");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SendBulkMail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Query input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Query input parameter</returns>
    public static Microsoft.Xrm.Sdk.Query.QueryBase GetQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Query.QueryBase)context.InputParameters["Query"];
    }

    /// <summary>
    /// Gets a value indicating whether the Query parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Query parameter exists in the input paramater collection</returns>
    public static bool ContainsQuery(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Query");
    }
    /// <summary>
    /// Gets the value of the RegardingId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingId input parameter</returns>
    public static System.Guid GetRegardingId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RegardingId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingId parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingId");
    }
    /// <summary>
    /// Gets the value of the RegardingType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingType input parameter</returns>
    public static System.String GetRegardingType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RegardingType"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingType parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingType");
    }
    /// <summary>
    /// Gets the value of the Sender input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Sender input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetSender(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Sender"];
    }

    /// <summary>
    /// Gets a value indicating whether the Sender parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Sender parameter exists in the input paramater collection</returns>
    public static bool ContainsSender(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Sender");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SendEmail
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EmailId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EmailId input parameter</returns>
    public static System.Guid GetEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EmailId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EmailId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EmailId parameter exists in the input paramater collection</returns>
    public static bool ContainsEmailId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EmailId");
    }
    /// <summary>
    /// Gets the value of the IssueSend input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IssueSend input parameter</returns>
    public static System.Boolean GetIssueSend(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IssueSend"];
    }

    /// <summary>
    /// Gets a value indicating whether the IssueSend parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IssueSend parameter exists in the input paramater collection</returns>
    public static bool ContainsIssueSend(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IssueSend");
    }
    /// <summary>
    /// Gets the value of the TrackingToken input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TrackingToken input parameter</returns>
    public static System.String GetTrackingToken(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["TrackingToken"];
    }

    /// <summary>
    /// Gets a value indicating whether the TrackingToken parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TrackingToken parameter exists in the input paramater collection</returns>
    public static bool ContainsTrackingToken(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TrackingToken");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Subject output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Subject output parameter</returns>
    public static System.String GetSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Subject"];
    }

    /// <summary>
    /// Gets a value indicating whether the Subject parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Subject parameter exists in the output paramater collection</returns>
    public static bool ContainsSubject(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Subject");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SendEmailFromTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RegardingId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingId input parameter</returns>
    public static System.Guid GetRegardingId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RegardingId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingId parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingId");
    }
    /// <summary>
    /// Gets the value of the RegardingType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingType input parameter</returns>
    public static System.String GetRegardingType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RegardingType"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingType parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingType");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Id output parameter</returns>
    public static System.Guid GetId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["Id"];
    }

    /// <summary>
    /// Gets a value indicating whether the Id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Id parameter exists in the output paramater collection</returns>
    public static bool ContainsId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SendFax
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FaxId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FaxId input parameter</returns>
    public static System.Guid GetFaxId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["FaxId"];
    }

    /// <summary>
    /// Gets a value indicating whether the FaxId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FaxId parameter exists in the input paramater collection</returns>
    public static bool ContainsFaxId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FaxId");
    }
    /// <summary>
    /// Gets the value of the IssueSend input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IssueSend input parameter</returns>
    public static System.Boolean GetIssueSend(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IssueSend"];
    }

    /// <summary>
    /// Gets a value indicating whether the IssueSend parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IssueSend parameter exists in the input paramater collection</returns>
    public static bool ContainsIssueSend(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IssueSend");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SendTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RecipientIds input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RecipientIds input parameter</returns>
    public static System.Guid[] GetRecipientIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid[])context.InputParameters["RecipientIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the RecipientIds parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RecipientIds parameter exists in the input paramater collection</returns>
    public static bool ContainsRecipientIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RecipientIds");
    }
    /// <summary>
    /// Gets the value of the RecipientType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RecipientType input parameter</returns>
    public static System.String GetRecipientType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RecipientType"];
    }

    /// <summary>
    /// Gets a value indicating whether the RecipientType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RecipientType parameter exists in the input paramater collection</returns>
    public static bool ContainsRecipientType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RecipientType");
    }
    /// <summary>
    /// Gets the value of the RegardingId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingId input parameter</returns>
    public static System.Guid GetRegardingId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["RegardingId"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingId parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingId");
    }
    /// <summary>
    /// Gets the value of the RegardingType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RegardingType input parameter</returns>
    public static System.String GetRegardingType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RegardingType"];
    }

    /// <summary>
    /// Gets a value indicating whether the RegardingType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RegardingType parameter exists in the input paramater collection</returns>
    public static bool ContainsRegardingType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RegardingType");
    }
    /// <summary>
    /// Gets the value of the Sender input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Sender input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetSender(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Sender"];
    }

    /// <summary>
    /// Gets a value indicating whether the Sender parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Sender parameter exists in the input paramater collection</returns>
    public static bool ContainsSender(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Sender");
    }
    /// <summary>
    /// Gets the value of the TemplateId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TemplateId input parameter</returns>
    public static System.Guid GetTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TemplateId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TemplateId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TemplateId parameter exists in the input paramater collection</returns>
    public static bool ContainsTemplateId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TemplateId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetBusinessEquipment
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessUnitId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessUnitId input parameter</returns>
    public static System.Guid GetBusinessUnitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BusinessUnitId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessUnitId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessUnitId parameter exists in the input paramater collection</returns>
    public static bool ContainsBusinessUnitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BusinessUnitId");
    }
    /// <summary>
    /// Gets the value of the EquipmentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EquipmentId input parameter</returns>
    public static System.Guid GetEquipmentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["EquipmentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the EquipmentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EquipmentId parameter exists in the input paramater collection</returns>
    public static bool ContainsEquipmentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EquipmentId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetBusinessSystemUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessId input parameter</returns>
    public static System.Guid GetBusinessId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BusinessId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessId parameter exists in the input paramater collection</returns>
    public static bool ContainsBusinessId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BusinessId");
    }
    /// <summary>
    /// Gets the value of the ReassignPrincipal input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReassignPrincipal input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetReassignPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["ReassignPrincipal"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReassignPrincipal parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReassignPrincipal parameter exists in the input paramater collection</returns>
    public static bool ContainsReassignPrincipal(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReassignPrincipal");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetDevErrors
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OrganizationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OrganizationId input parameter</returns>
    public static System.Guid GetOrganizationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["OrganizationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OrganizationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OrganizationId parameter exists in the input paramater collection</returns>
    public static bool ContainsOrganizationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OrganizationId");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }
    /// <summary>
    /// Gets the value of the Value input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Value input parameter</returns>
    public static System.Boolean GetValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["Value"];
    }

    /// <summary>
    /// Gets a value indicating whether the Value parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Value parameter exists in the input paramater collection</returns>
    public static bool ContainsValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Value");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetLocLabels
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeName input parameter</returns>
    public static System.String GetAttributeName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeName");
    }
    /// <summary>
    /// Gets the value of the EntityMoniker input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMoniker input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["EntityMoniker"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMoniker parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMoniker parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityMoniker");
    }
    /// <summary>
    /// Gets the value of the Labels input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Labels input parameter</returns>
    public static Microsoft.Xrm.Sdk.LocalizedLabel[] GetLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.LocalizedLabel[])context.InputParameters["Labels"];
    }

    /// <summary>
    /// Gets a value indicating whether the Labels parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Labels parameter exists in the input paramater collection</returns>
    public static bool ContainsLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Labels");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetOptionalFeatureStatus
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Name input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Name input parameter</returns>
    public static System.String GetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["Name"];
    }

    /// <summary>
    /// Gets a value indicating whether the Name parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Name parameter exists in the input paramater collection</returns>
    public static bool ContainsName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Name");
    }
    /// <summary>
    /// Gets the value of the NewStatus input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the NewStatus input parameter</returns>
    public static System.Boolean GetNewStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["NewStatus"];
    }

    /// <summary>
    /// Gets a value indicating whether the NewStatus parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the NewStatus parameter exists in the input paramater collection</returns>
    public static bool ContainsNewStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("NewStatus");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetParentBusinessUnit
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessUnitId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessUnitId input parameter</returns>
    public static System.Guid GetBusinessUnitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BusinessUnitId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessUnitId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessUnitId parameter exists in the input paramater collection</returns>
    public static bool ContainsBusinessUnitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BusinessUnitId");
    }
    /// <summary>
    /// Gets the value of the ParentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParentId input parameter</returns>
    public static System.Guid GetParentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ParentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParentId parameter exists in the input paramater collection</returns>
    public static bool ContainsParentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParentId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetParentSystemUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the KeepChildUsers input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the KeepChildUsers input parameter</returns>
    public static System.Boolean GetKeepChildUsers(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["KeepChildUsers"];
    }

    /// <summary>
    /// Gets a value indicating whether the KeepChildUsers parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the KeepChildUsers parameter exists in the input paramater collection</returns>
    public static bool ContainsKeepChildUsers(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("KeepChildUsers");
    }
    /// <summary>
    /// Gets the value of the ParentId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParentId input parameter</returns>
    public static System.Guid GetParentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ParentId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParentId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParentId parameter exists in the input paramater collection</returns>
    public static bool ContainsParentId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParentId");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetParentTeam
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessId input parameter</returns>
    public static System.Guid GetBusinessId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BusinessId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessId parameter exists in the input paramater collection</returns>
    public static bool ContainsBusinessId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BusinessId");
    }
    /// <summary>
    /// Gets the value of the TeamId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TeamId input parameter</returns>
    public static System.Guid GetTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["TeamId"];
    }

    /// <summary>
    /// Gets a value indicating whether the TeamId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TeamId parameter exists in the input paramater collection</returns>
    public static bool ContainsTeamId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TeamId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetPrimaryClientSubscriptionClients
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ClientId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ClientId input parameter</returns>
    public static System.Guid GetClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ClientId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ClientId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ClientId parameter exists in the input paramater collection</returns>
    public static bool ContainsClientId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ClientId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetRelated
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference[] GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference[])context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetReportRelated
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Categories input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Categories input parameter</returns>
    public static System.Int32[] GetCategories(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.InputParameters["Categories"];
    }

    /// <summary>
    /// Gets a value indicating whether the Categories parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Categories parameter exists in the input paramater collection</returns>
    public static bool ContainsCategories(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Categories");
    }
    /// <summary>
    /// Gets the value of the Entities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entities input parameter</returns>
    public static System.Int32[] GetEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.InputParameters["Entities"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entities parameter exists in the input paramater collection</returns>
    public static bool ContainsEntities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entities");
    }
    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }
    /// <summary>
    /// Gets the value of the Visibility input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Visibility input parameter</returns>
    public static System.Int32[] GetVisibility(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.InputParameters["Visibility"];
    }

    /// <summary>
    /// Gets a value indicating whether the Visibility parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Visibility parameter exists in the input paramater collection</returns>
    public static bool ContainsVisibility(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Visibility");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetState
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityMoniker input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMoniker input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["EntityMoniker"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMoniker parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMoniker parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityMoniker");
    }
    /// <summary>
    /// Gets the value of the State input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the State input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["State"];
    }

    /// <summary>
    /// Gets a value indicating whether the State parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the State parameter exists in the input paramater collection</returns>
    public static bool ContainsState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("State");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.SetStateDynamicEntity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityMoniker input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityMoniker input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["EntityMoniker"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityMoniker parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityMoniker parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityMoniker(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityMoniker");
    }
    /// <summary>
    /// Gets the value of the State input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the State input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["State"];
    }

    /// <summary>
    /// Gets a value indicating whether the State parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the State parameter exists in the input paramater collection</returns>
    public static bool ContainsState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("State");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.StatusUpdateBulkOperation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BulkOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BulkOperationId input parameter</returns>
    public static System.Guid GetBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["BulkOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BulkOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BulkOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsBulkOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BulkOperationId");
    }
    /// <summary>
    /// Gets the value of the FailureCount input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FailureCount input parameter</returns>
    public static System.Int32 GetFailureCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["FailureCount"];
    }

    /// <summary>
    /// Gets a value indicating whether the FailureCount parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FailureCount parameter exists in the input paramater collection</returns>
    public static bool ContainsFailureCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FailureCount");
    }
    /// <summary>
    /// Gets the value of the SuccessCount input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SuccessCount input parameter</returns>
    public static System.Int32 GetSuccessCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["SuccessCount"];
    }

    /// <summary>
    /// Gets a value indicating whether the SuccessCount parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SuccessCount parameter exists in the input paramater collection</returns>
    public static bool ContainsSuccessCount(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SuccessCount");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.TransformImport
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ImportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ImportId input parameter</returns>
    public static System.Guid GetImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ImportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ImportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ImportId parameter exists in the input paramater collection</returns>
    public static bool ContainsImportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ImportId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AsyncOperationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AsyncOperationId output parameter</returns>
    public static System.Guid GetAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["AsyncOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AsyncOperationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AsyncOperationId parameter exists in the output paramater collection</returns>
    public static bool ContainsAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("AsyncOperationId");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.TriggerServiceEndpointCheck
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UnlockInvoicePricing
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the InvoiceId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the InvoiceId input parameter</returns>
    public static System.Guid GetInvoiceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["InvoiceId"];
    }

    /// <summary>
    /// Gets a value indicating whether the InvoiceId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the InvoiceId parameter exists in the input paramater collection</returns>
    public static bool ContainsInvoiceId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("InvoiceId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UnlockSalesOrderPricing
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the SalesOrderId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SalesOrderId input parameter</returns>
    public static System.Guid GetSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["SalesOrderId"];
    }

    /// <summary>
    /// Gets a value indicating whether the SalesOrderId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SalesOrderId parameter exists in the input paramater collection</returns>
    public static bool ContainsSalesOrderId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SalesOrderId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UnpublishDuplicateRule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the DuplicateRuleId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DuplicateRuleId input parameter</returns>
    public static System.Guid GetDuplicateRuleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["DuplicateRuleId"];
    }

    /// <summary>
    /// Gets a value indicating whether the DuplicateRuleId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DuplicateRuleId parameter exists in the input paramater collection</returns>
    public static bool ContainsDuplicateRuleId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DuplicateRuleId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UnregisterSolution
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the PluginAssemblyId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the PluginAssemblyId input parameter</returns>
    public static System.Guid GetPluginAssemblyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["PluginAssemblyId"];
    }

    /// <summary>
    /// Gets a value indicating whether the PluginAssemblyId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the PluginAssemblyId parameter exists in the input paramater collection</returns>
    public static bool ContainsPluginAssemblyId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("PluginAssemblyId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Update
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CalculateMatchCodeSynchronously input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CalculateMatchCodeSynchronously input parameter</returns>
    public static System.Boolean GetCalculateMatchCodeSynchronously(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["CalculateMatchCodeSynchronously"];
    }

    /// <summary>
    /// Gets a value indicating whether the CalculateMatchCodeSynchronously parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CalculateMatchCodeSynchronously parameter exists in the input paramater collection</returns>
    public static bool ContainsCalculateMatchCodeSynchronously(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("CalculateMatchCodeSynchronously");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the SuppressDuplicateDetection input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SuppressDuplicateDetection input parameter</returns>
    public static System.Boolean GetSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["SuppressDuplicateDetection"];
    }

    /// <summary>
    /// Gets a value indicating whether the SuppressDuplicateDetection parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SuppressDuplicateDetection parameter exists in the input paramater collection</returns>
    public static bool ContainsSuppressDuplicateDetection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SuppressDuplicateDetection");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateAttribute
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Attribute input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Attribute input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.AttributeMetadata GetAttribute(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.AttributeMetadata)context.InputParameters["Attribute"];
    }

    /// <summary>
    /// Gets a value indicating whether the Attribute parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Attribute parameter exists in the input paramater collection</returns>
    public static bool ContainsAttribute(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Attribute");
    }
    /// <summary>
    /// Gets the value of the EntityName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityName input parameter</returns>
    public static System.String GetEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityName");
    }
    /// <summary>
    /// Gets the value of the MergeLabels input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MergeLabels input parameter</returns>
    public static System.Boolean GetMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["MergeLabels"];
    }

    /// <summary>
    /// Gets a value indicating whether the MergeLabels parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MergeLabels parameter exists in the input paramater collection</returns>
    public static bool ContainsMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MergeLabels");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateEntity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Entity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Entity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.EntityMetadata GetEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.EntityMetadata)context.InputParameters["Entity"];
    }

    /// <summary>
    /// Gets a value indicating whether the Entity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Entity parameter exists in the input paramater collection</returns>
    public static bool ContainsEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Entity");
    }
    /// <summary>
    /// Gets the value of the HasActivities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the HasActivities input parameter</returns>
    public static bool? GetHasActivities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (bool?)context.InputParameters["HasActivities"];
    }

    /// <summary>
    /// Gets a value indicating whether the HasActivities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the HasActivities parameter exists in the input paramater collection</returns>
    public static bool ContainsHasActivities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("HasActivities");
    }
    /// <summary>
    /// Gets the value of the HasNotes input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the HasNotes input parameter</returns>
    public static bool? GetHasNotes(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (bool?)context.InputParameters["HasNotes"];
    }

    /// <summary>
    /// Gets a value indicating whether the HasNotes parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the HasNotes parameter exists in the input paramater collection</returns>
    public static bool ContainsHasNotes(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("HasNotes");
    }
    /// <summary>
    /// Gets the value of the MergeLabels input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MergeLabels input parameter</returns>
    public static System.Boolean GetMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["MergeLabels"];
    }

    /// <summary>
    /// Gets a value indicating whether the MergeLabels parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MergeLabels parameter exists in the input paramater collection</returns>
    public static bool ContainsMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MergeLabels");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateFromTemplate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsOrgReport input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsOrgReport input parameter</returns>
    public static System.Boolean GetIsOrgReport(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["IsOrgReport"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsOrgReport parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsOrgReport parameter exists in the input paramater collection</returns>
    public static bool ContainsIsOrgReport(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("IsOrgReport");
    }
    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the WizardXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the WizardXml input parameter</returns>
    public static System.String GetWizardXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["WizardXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the WizardXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the WizardXml parameter exists in the input paramater collection</returns>
    public static bool ContainsWizardXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("WizardXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateOptionSet
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MergeLabels input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MergeLabels input parameter</returns>
    public static System.Boolean GetMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["MergeLabels"];
    }

    /// <summary>
    /// Gets a value indicating whether the MergeLabels parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MergeLabels parameter exists in the input paramater collection</returns>
    public static bool ContainsMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MergeLabels");
    }
    /// <summary>
    /// Gets the value of the OptionSet input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSet input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase GetOptionSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.OptionSetMetadataBase)context.InputParameters["OptionSet"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSet parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSet parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSet(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSet");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateOptionValue
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeLogicalName input parameter</returns>
    public static System.String GetAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeLogicalName");
    }
    /// <summary>
    /// Gets the value of the Description input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Description input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Description"];
    }

    /// <summary>
    /// Gets a value indicating whether the Description parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Description parameter exists in the input paramater collection</returns>
    public static bool ContainsDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Description");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the Label input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Label input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Label"];
    }

    /// <summary>
    /// Gets a value indicating whether the Label parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Label parameter exists in the input paramater collection</returns>
    public static bool ContainsLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Label");
    }
    /// <summary>
    /// Gets the value of the MergeLabels input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MergeLabels input parameter</returns>
    public static System.Boolean GetMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["MergeLabels"];
    }

    /// <summary>
    /// Gets a value indicating whether the MergeLabels parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MergeLabels parameter exists in the input paramater collection</returns>
    public static bool ContainsMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MergeLabels");
    }
    /// <summary>
    /// Gets the value of the OptionSetName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetName input parameter</returns>
    public static System.String GetOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["OptionSetName"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetName parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSetName");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }
    /// <summary>
    /// Gets the value of the Value input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Value input parameter</returns>
    public static System.Int32 GetValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Value"];
    }

    /// <summary>
    /// Gets a value indicating whether the Value parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Value parameter exists in the input paramater collection</returns>
    public static bool ContainsValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Value");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateRecurrencePattern
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AsyncOperationId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AsyncOperationId input parameter</returns>
    public static System.Guid GetAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["AsyncOperationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the AsyncOperationId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AsyncOperationId parameter exists in the input paramater collection</returns>
    public static bool ContainsAsyncOperationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AsyncOperationId");
    }
    /// <summary>
    /// Gets the value of the RecurrencePattern input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RecurrencePattern input parameter</returns>
    public static System.String GetRecurrencePattern(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["RecurrencePattern"];
    }

    /// <summary>
    /// Gets a value indicating whether the RecurrencePattern parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RecurrencePattern parameter exists in the input paramater collection</returns>
    public static bool ContainsRecurrencePattern(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("RecurrencePattern");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateRelationship
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the MergeLabels input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MergeLabels input parameter</returns>
    public static System.Boolean GetMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["MergeLabels"];
    }

    /// <summary>
    /// Gets a value indicating whether the MergeLabels parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MergeLabels parameter exists in the input paramater collection</returns>
    public static bool ContainsMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MergeLabels");
    }
    /// <summary>
    /// Gets the value of the Relationship input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Relationship input parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.RelationshipMetadataBase GetRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.RelationshipMetadataBase)context.InputParameters["Relationship"];
    }

    /// <summary>
    /// Gets a value indicating whether the Relationship parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Relationship parameter exists in the input paramater collection</returns>
    public static bool ContainsRelationship(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Relationship");
    }
    /// <summary>
    /// Gets the value of the SolutionUniqueName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the SolutionUniqueName input parameter</returns>
    public static System.String GetSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["SolutionUniqueName"];
    }

    /// <summary>
    /// Gets a value indicating whether the SolutionUniqueName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the SolutionUniqueName parameter exists in the input paramater collection</returns>
    public static bool ContainsSolutionUniqueName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("SolutionUniqueName");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateSchedule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ParameterXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ParameterXml input parameter</returns>
    public static System.String GetParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ParameterXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ParameterXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ParameterXml parameter exists in the input paramater collection</returns>
    public static bool ContainsParameterXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ParameterXml");
    }
    /// <summary>
    /// Gets the value of the ReportId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ReportId input parameter</returns>
    public static System.Guid GetReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["ReportId"];
    }

    /// <summary>
    /// Gets a value indicating whether the ReportId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ReportId parameter exists in the input paramater collection</returns>
    public static bool ContainsReportId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ReportId");
    }
    /// <summary>
    /// Gets the value of the ScheduledReportName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ScheduledReportName input parameter</returns>
    public static System.String GetScheduledReportName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ScheduledReportName"];
    }

    /// <summary>
    /// Gets a value indicating whether the ScheduledReportName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ScheduledReportName parameter exists in the input paramater collection</returns>
    public static bool ContainsScheduledReportName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ScheduledReportName");
    }
    /// <summary>
    /// Gets the value of the ScheduleXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ScheduleXml input parameter</returns>
    public static System.String GetScheduleXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ScheduleXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ScheduleXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ScheduleXml parameter exists in the input paramater collection</returns>
    public static bool ContainsScheduleXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ScheduleXml");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateStateValue
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the AttributeLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the AttributeLogicalName input parameter</returns>
    public static System.String GetAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["AttributeLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the AttributeLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the AttributeLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsAttributeLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("AttributeLogicalName");
    }
    /// <summary>
    /// Gets the value of the DefaultStatusCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the DefaultStatusCode input parameter</returns>
    public static int? GetDefaultStatusCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (int?)context.InputParameters["DefaultStatusCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the DefaultStatusCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the DefaultStatusCode parameter exists in the input paramater collection</returns>
    public static bool ContainsDefaultStatusCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("DefaultStatusCode");
    }
    /// <summary>
    /// Gets the value of the Description input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Description input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Description"];
    }

    /// <summary>
    /// Gets a value indicating whether the Description parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Description parameter exists in the input paramater collection</returns>
    public static bool ContainsDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Description");
    }
    /// <summary>
    /// Gets the value of the EntityLogicalName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityLogicalName input parameter</returns>
    public static System.String GetEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["EntityLogicalName"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityLogicalName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityLogicalName parameter exists in the input paramater collection</returns>
    public static bool ContainsEntityLogicalName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("EntityLogicalName");
    }
    /// <summary>
    /// Gets the value of the Label input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Label input parameter</returns>
    public static Microsoft.Xrm.Sdk.Label GetLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Label)context.InputParameters["Label"];
    }

    /// <summary>
    /// Gets a value indicating whether the Label parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Label parameter exists in the input paramater collection</returns>
    public static bool ContainsLabel(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Label");
    }
    /// <summary>
    /// Gets the value of the MergeLabels input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the MergeLabels input parameter</returns>
    public static System.Boolean GetMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.InputParameters["MergeLabels"];
    }

    /// <summary>
    /// Gets a value indicating whether the MergeLabels parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the MergeLabels parameter exists in the input paramater collection</returns>
    public static bool ContainsMergeLabels(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("MergeLabels");
    }
    /// <summary>
    /// Gets the value of the OptionSetName input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OptionSetName input parameter</returns>
    public static System.String GetOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["OptionSetName"];
    }

    /// <summary>
    /// Gets a value indicating whether the OptionSetName parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OptionSetName parameter exists in the input paramater collection</returns>
    public static bool ContainsOptionSetName(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OptionSetName");
    }
    /// <summary>
    /// Gets the value of the Value input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Value input parameter</returns>
    public static System.Int32 GetValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["Value"];
    }

    /// <summary>
    /// Gets a value indicating whether the Value parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Value parameter exists in the input paramater collection</returns>
    public static bool ContainsValue(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Value");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateUserSettingsSystemUser
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Settings input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Settings input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Settings"];
    }

    /// <summary>
    /// Gets a value indicating whether the Settings parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Settings parameter exists in the input paramater collection</returns>
    public static bool ContainsSettings(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Settings");
    }
    /// <summary>
    /// Gets the value of the UserId input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId input parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.InputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the input paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("UserId");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UpdateYammerProperties
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the input paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("BusinessEntity");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.UtcTimeFromLocalTime
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LocalTime input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LocalTime input parameter</returns>
    public static System.DateTime GetLocalTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.InputParameters["LocalTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the LocalTime parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LocalTime parameter exists in the input paramater collection</returns>
    public static bool ContainsLocalTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("LocalTime");
    }
    /// <summary>
    /// Gets the value of the TimeZoneCode input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TimeZoneCode input parameter</returns>
    public static System.Int32 GetTimeZoneCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["TimeZoneCode"];
    }

    /// <summary>
    /// Gets a value indicating whether the TimeZoneCode parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TimeZoneCode parameter exists in the input paramater collection</returns>
    public static bool ContainsTimeZoneCode(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("TimeZoneCode");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the UtcTime output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UtcTime output parameter</returns>
    public static System.DateTime GetUtcTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.DateTime)context.OutputParameters["UtcTime"];
    }

    /// <summary>
    /// Gets a value indicating whether the UtcTime parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UtcTime parameter exists in the output paramater collection</returns>
    public static bool ContainsUtcTime(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("UtcTime");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.Validate
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Activities input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Activities input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetActivities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.InputParameters["Activities"];
    }

    /// <summary>
    /// Gets a value indicating whether the Activities parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Activities parameter exists in the input paramater collection</returns>
    public static bool ContainsActivities(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Activities");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ValidateRecurrenceRule
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Description output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Description output parameter</returns>
    public static System.String GetDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Description"];
    }

    /// <summary>
    /// Gets a value indicating whether the Description parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Description parameter exists in the output paramater collection</returns>
    public static bool ContainsDescription(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Description");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ValidateSavedQuery
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the FetchXml input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the FetchXml input parameter</returns>
    public static System.String GetFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["FetchXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the FetchXml parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the FetchXml parameter exists in the input paramater collection</returns>
    public static bool ContainsFetchXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("FetchXml");
    }
    /// <summary>
    /// Gets the value of the QueryType input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QueryType input parameter</returns>
    public static System.Int32 GetQueryType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.InputParameters["QueryType"];
    }

    /// <summary>
    /// Gets a value indicating whether the QueryType parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QueryType parameter exists in the input paramater collection</returns>
    public static bool ContainsQueryType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QueryType");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.VerifyProcessStateData
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ProcessState input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ProcessState input parameter</returns>
    public static System.String GetProcessState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.InputParameters["ProcessState"];
    }

    /// <summary>
    /// Gets a value indicating whether the ProcessState parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ProcessState parameter exists in the input paramater collection</returns>
    public static bool ContainsProcessState(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("ProcessState");
    }
    /// <summary>
    /// Gets the value of the Target input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Target input parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityReference GetTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityReference)context.InputParameters["Target"];
    }

    /// <summary>
    /// Gets a value indicating whether the Target parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Target parameter exists in the input paramater collection</returns>
    public static bool ContainsTarget(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Target");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsValid output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsValid output parameter</returns>
    public static System.Boolean GetIsValid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsValid"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsValid parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsValid parameter exists in the output paramater collection</returns>
    public static bool ContainsIsValid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsValid");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.WinOpportunity
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the OpportunityClose input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OpportunityClose input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetOpportunityClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["OpportunityClose"];
    }

    /// <summary>
    /// Gets a value indicating whether the OpportunityClose parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OpportunityClose parameter exists in the input paramater collection</returns>
    public static bool ContainsOpportunityClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("OpportunityClose");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.WinQuote
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the QuoteClose input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the QuoteClose input parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetQuoteClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.InputParameters["QuoteClose"];
    }

    /// <summary>
    /// Gets a value indicating whether the QuoteClose parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the QuoteClose parameter exists in the input paramater collection</returns>
    public static bool ContainsQuoteClose(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("QuoteClose");
    }
    /// <summary>
    /// Gets the value of the Status input parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Status input parameter</returns>
    public static Microsoft.Xrm.Sdk.OptionSetValue GetStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.OptionSetValue)context.InputParameters["Status"];
    }

    /// <summary>
    /// Gets a value indicating whether the Status parameter exists in the input paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Status parameter exists in the input paramater collection</returns>
    public static bool ContainsStatus(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.InputParameters.Contains("Status");
    }

  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }


  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.CreateSubscription
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the id output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the id output parameter</returns>
    public static System.Guid Getid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["id"];
    }

    /// <summary>
    /// Gets a value indicating whether the id parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the id parameter exists in the output paramater collection</returns>
    public static bool Containsid(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("id");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.DebugTraceBufferGetContents
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the TraceBuffer output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TraceBuffer output parameter</returns>
    public static System.String[] GetTraceBuffer(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["TraceBuffer"];
    }

    /// <summary>
    /// Gets a value indicating whether the TraceBuffer parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TraceBuffer parameter exists in the output paramater collection</returns>
    public static bool ContainsTraceBuffer(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("TraceBuffer");
    }
    /// <summary>
    /// Gets the value of the TraceBufferSizeSetting output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the TraceBufferSizeSetting output parameter</returns>
    public static System.Int32 GetTraceBufferSizeSetting(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32)context.OutputParameters["TraceBufferSizeSetting"];
    }

    /// <summary>
    /// Gets a value indicating whether the TraceBufferSizeSetting parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the TraceBufferSizeSetting parameter exists in the output paramater collection</returns>
    public static bool ContainsTraceBufferSizeSetting(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("TraceBufferSizeSetting");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportAllXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportXml output parameter</returns>
    public static System.String GetExportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["ExportXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportXml parameter exists in the output paramater collection</returns>
    public static bool ContainsExportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.ExportTranslationsXml
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ExportXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ExportXml output parameter</returns>
    public static System.String GetExportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["ExportXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the ExportXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ExportXml parameter exists in the output paramater collection</returns>
    public static bool ContainsExportXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ExportXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetDecryptionKey
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Key output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Key output parameter</returns>
    public static System.String GetKey(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Key"];
    }

    /// <summary>
    /// Gets a value indicating whether the Key parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Key parameter exists in the output paramater collection</returns>
    public static bool ContainsKey(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Key");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.GetValidManyToMany
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the EntityNames output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the EntityNames output parameter</returns>
    public static System.String[] GetEntityNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String[])context.OutputParameters["EntityNames"];
    }

    /// <summary>
    /// Gets a value indicating whether the EntityNames parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the EntityNames parameter exists in the output paramater collection</returns>
    public static bool ContainsEntityNames(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("EntityNames");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsBackOfficeInstalled
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsInstalled output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsInstalled output parameter</returns>
    public static System.Boolean GetIsInstalled(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsInstalled"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsInstalled parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsInstalled parameter exists in the output paramater collection</returns>
    public static bool ContainsIsInstalled(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsInstalled");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.IsServerWorkgroup
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the IsWorkgroup output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the IsWorkgroup output parameter</returns>
    public static System.Boolean GetIsWorkgroup(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Boolean)context.OutputParameters["IsWorkgroup"];
    }

    /// <summary>
    /// Gets a value indicating whether the IsWorkgroup parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the IsWorkgroup parameter exists in the output paramater collection</returns>
    public static bool ContainsIsWorkgroup(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("IsWorkgroup");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAllManagedProperties
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the ManagedPropertyMetadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the ManagedPropertyMetadata output parameter</returns>
    public static Microsoft.Xrm.Sdk.Metadata.ManagedPropertyMetadata[] GetManagedPropertyMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Metadata.ManagedPropertyMetadata[])context.OutputParameters["ManagedPropertyMetadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the ManagedPropertyMetadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the ManagedPropertyMetadata parameter exists in the output paramater collection</returns>
    public static bool ContainsManagedPropertyMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("ManagedPropertyMetadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveApplicationRibbon
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the CompressedApplicationRibbonXml output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the CompressedApplicationRibbonXml output parameter</returns>
    public static System.Byte[] GetCompressedApplicationRibbonXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["CompressedApplicationRibbonXml"];
    }

    /// <summary>
    /// Gets a value indicating whether the CompressedApplicationRibbonXml parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the CompressedApplicationRibbonXml parameter exists in the output paramater collection</returns>
    public static bool ContainsCompressedApplicationRibbonXml(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("CompressedApplicationRibbonXml");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveAvailableLanguages
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LocaleIds output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LocaleIds output parameter</returns>
    public static System.Int32[] GetLocaleIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.OutputParameters["LocaleIds"];
    }

    /// <summary>
    /// Gets a value indicating whether the LocaleIds parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LocaleIds parameter exists in the output paramater collection</returns>
    public static bool ContainsLocaleIds(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("LocaleIds");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveCollation
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Result output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Result output parameter</returns>
    public static System.String GetResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Result"];
    }

    /// <summary>
    /// Gets a value indicating whether the Result parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Result parameter exists in the output paramater collection</returns>
    public static bool ContainsResult(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Result");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveDeploymentLicenseType
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the licenseType output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the licenseType output parameter</returns>
    public static System.String GetlicenseType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["licenseType"];
    }

    /// <summary>
    /// Gets a value indicating whether the licenseType parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the licenseType parameter exists in the output paramater collection</returns>
    public static bool ContainslicenseType(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("licenseType");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveDeprovisionedLanguages
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RetrieveDeprovisionedLanguages output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveDeprovisionedLanguages output parameter</returns>
    public static System.Int32[] GetRetrieveDeprovisionedLanguages(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.OutputParameters["RetrieveDeprovisionedLanguages"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveDeprovisionedLanguages parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveDeprovisionedLanguages parameter exists in the output paramater collection</returns>
    public static bool ContainsRetrieveDeprovisionedLanguages(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("RetrieveDeprovisionedLanguages");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveInstalledLanguagePacks
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RetrieveInstalledLanguagePacks output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveInstalledLanguagePacks output parameter</returns>
    public static System.Int32[] GetRetrieveInstalledLanguagePacks(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.OutputParameters["RetrieveInstalledLanguagePacks"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveInstalledLanguagePacks parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveInstalledLanguagePacks parameter exists in the output paramater collection</returns>
    public static bool ContainsRetrieveInstalledLanguagePacks(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("RetrieveInstalledLanguagePacks");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveLanguagesAvailableForProvisioning
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the LanguagesAvailableForProvisioning output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the LanguagesAvailableForProvisioning output parameter</returns>
    public static System.Int32[] GetLanguagesAvailableForProvisioning(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.OutputParameters["LanguagesAvailableForProvisioning"];
    }

    /// <summary>
    /// Gets a value indicating whether the LanguagesAvailableForProvisioning parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the LanguagesAvailableForProvisioning parameter exists in the output paramater collection</returns>
    public static bool ContainsLanguagesAvailableForProvisioning(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("LanguagesAvailableForProvisioning");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveMetadataForRichClient
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Metadata output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Metadata output parameter</returns>
    public static System.Byte[] GetMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Byte[])context.OutputParameters["Metadata"];
    }

    /// <summary>
    /// Gets a value indicating whether the Metadata parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Metadata parameter exists in the output paramater collection</returns>
    public static bool ContainsMetadata(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Metadata");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrievePrivilegeSet
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntityCollection output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntityCollection output parameter</returns>
    public static Microsoft.Xrm.Sdk.EntityCollection GetBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.EntityCollection)context.OutputParameters["BusinessEntityCollection"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntityCollection parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntityCollection(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntityCollection");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveProvisionedLanguages
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the RetrieveProvisionedLanguages output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the RetrieveProvisionedLanguages output parameter</returns>
    public static System.Int32[] GetRetrieveProvisionedLanguages(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Int32[])context.OutputParameters["RetrieveProvisionedLanguages"];
    }

    /// <summary>
    /// Gets a value indicating whether the RetrieveProvisionedLanguages parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the RetrieveProvisionedLanguages parameter exists in the output paramater collection</returns>
    public static bool ContainsRetrieveProvisionedLanguages(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("RetrieveProvisionedLanguages");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveReferenceSiteMap
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessEntity output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessEntity output parameter</returns>
    public static Microsoft.Xrm.Sdk.Entity GetBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (Microsoft.Xrm.Sdk.Entity)context.OutputParameters["BusinessEntity"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessEntity parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessEntity parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessEntity(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessEntity");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveTimestamp
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Timestamp output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Timestamp output parameter</returns>
    public static System.String GetTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Timestamp"];
    }

    /// <summary>
    /// Gets a value indicating whether the Timestamp parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Timestamp parameter exists in the output paramater collection</returns>
    public static bool ContainsTimestamp(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Timestamp");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.RetrieveVersion
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the Version output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the Version output parameter</returns>
    public static System.String GetVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.String)context.OutputParameters["Version"];
    }

    /// <summary>
    /// Gets a value indicating whether the Version parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the Version parameter exists in the output paramater collection</returns>
    public static bool ContainsVersion(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("Version");
    }

  }
}
namespace Francis_ABC.D365.Core.Helpers.Plugins.WhoAmI
{
  public sealed class InputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="InputParameters"/> class from being created.
    /// </summary>
    private InputParameters()
    {
    }


  }

  public sealed class OutputParameters
  {
    /// <summary>
    /// Prevents a default instance of the <see cref="OutputParameters"/> class from being created.
    /// </summary>
    private OutputParameters()
    {
    }

    /// <summary>
    /// Gets the value of the BusinessUnitId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the BusinessUnitId output parameter</returns>
    public static System.Guid GetBusinessUnitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["BusinessUnitId"];
    }

    /// <summary>
    /// Gets a value indicating whether the BusinessUnitId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the BusinessUnitId parameter exists in the output paramater collection</returns>
    public static bool ContainsBusinessUnitId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("BusinessUnitId");
    }
    /// <summary>
    /// Gets the value of the OrganizationId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the OrganizationId output parameter</returns>
    public static System.Guid GetOrganizationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["OrganizationId"];
    }

    /// <summary>
    /// Gets a value indicating whether the OrganizationId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the OrganizationId parameter exists in the output paramater collection</returns>
    public static bool ContainsOrganizationId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("OrganizationId");
    }
    /// <summary>
    /// Gets the value of the UserId output parameter
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>The value of the UserId output parameter</returns>
    public static System.Guid GetUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return (System.Guid)context.OutputParameters["UserId"];
    }

    /// <summary>
    /// Gets a value indicating whether the UserId parameter exists in the output paramater collection
    /// </summary>
    /// <param name="context">The plugin execution context</param>
    /// <returns>A value indicating whether the UserId parameter exists in the output paramater collection</returns>
    public static bool ContainsUserId(Microsoft.Xrm.Sdk.IPluginExecutionContext context)
    {
      return context.OutputParameters.Contains("UserId");
    }

  }
}

